
SPI_ADS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b60  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005d58  08005d58  00015d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d78  08005d78  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d78  08005d78  00015d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d80  08005d80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d80  08005d80  00015d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d84  08005d84  00015d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  2000000c  08005d94  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08005d94  00020380  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e76b  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000203b  00000000  00000000  0002e7a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d28  00000000  00000000  000307e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c20  00000000  00000000  00031508  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002883d  00000000  00000000  00032128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aeff  00000000  00000000  0005a965  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ff450  00000000  00000000  00065864  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00164cb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003698  00000000  00000000  00164d30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005d40 	.word	0x08005d40

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08005d40 	.word	0x08005d40

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <calcChecksum.9053>:
  /* USER CODE BEGIN Init */

HAL_ADC_Start_DMA(&hadc1, GerSic, 2); // dma ile adc başlatıldı

uint8_t calcChecksum(uint8_t* data, uint32_t length) //ADS için checksum function
{
 8000538:	b480      	push	{r7}
 800053a:	b087      	sub	sp, #28
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	f8c7 c004 	str.w	ip, [r7, #4]
uint32_t result = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
uint32_t i;
for(i = 0; i < length; i++)
 800054a:	2300      	movs	r3, #0
 800054c:	613b      	str	r3, [r7, #16]
 800054e:	e00a      	b.n	8000566 <calcChecksum.9053+0x2e>
result += data[i]; // Add conversion data bytes together
 8000550:	68fa      	ldr	r2, [r7, #12]
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	4413      	add	r3, r2
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	461a      	mov	r2, r3
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	4413      	add	r3, r2
 800055e:	617b      	str	r3, [r7, #20]
for(i = 0; i < length; i++)
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	3301      	adds	r3, #1
 8000564:	613b      	str	r3, [r7, #16]
 8000566:	693a      	ldr	r2, [r7, #16]
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	429a      	cmp	r2, r3
 800056c:	d3f0      	bcc.n	8000550 <calcChecksum.9053+0x18>
result += 0x9B; // Add constant
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	339b      	adds	r3, #155	; 0x9b
 8000572:	617b      	str	r3, [r7, #20]
return (uint8_t) result;
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	b2db      	uxtb	r3, r3
}
 8000578:	4618      	mov	r0, r3
 800057a:	371c      	adds	r7, #28
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <main>:
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0ce      	sub	sp, #312	; 0x138
 8000588:	af00      	add	r7, sp, #0
int main(void)
 800058a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800058e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
uint8_t CONFIG0 = 0x80; /* 10000000 BİT 0 2 5 4 RBIAS?   */
 8000592:	2380      	movs	r3, #128	; 0x80
 8000594:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
uint8_t CONFIG1 = 0x48;      /* 01001011 3 2 7 ? */
 8000598:	2348      	movs	r3, #72	; 0x48
 800059a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
uint8_t CONFIG2 = 0x40;           /* 01000000 */
 800059e:	2340      	movs	r3, #64	; 0x40
 80005a0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
  HAL_Init();
 80005a4:	f001 f88f 	bl	80016c6 <HAL_Init>
HAL_ADC_Start_DMA(&hadc1, GerSic, 2); // dma ile adc başlatıldı
 80005a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005ac:	3370      	adds	r3, #112	; 0x70
 80005ae:	2202      	movs	r2, #2
 80005b0:	4619      	mov	r1, r3
 80005b2:	4837      	ldr	r0, [pc, #220]	; (8000690 <main+0x10c>)
 80005b4:	f001 f928 	bl	8001808 <HAL_ADC_Start_DMA>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 fa8e 	bl	8000ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 fd36 	bl	800102c <MX_GPIO_Init>
  MX_DMA_Init();
 80005c0:	f000 fd16 	bl	8000ff0 <MX_DMA_Init>
  MX_ADC1_Init();
 80005c4:	f000 fb24 	bl	8000c10 <MX_ADC1_Init>
  MX_CAN1_Init();
 80005c8:	f000 fb82 	bl	8000cd0 <MX_CAN1_Init>
  MX_SPI1_Init();
 80005cc:	f000 fc12 	bl	8000df4 <MX_SPI1_Init>
  MX_UART4_Init();
 80005d0:	f000 fc4e 	bl	8000e70 <MX_UART4_Init>
  MX_UART5_Init();
 80005d4:	f000 fc7c 	bl	8000ed0 <MX_UART5_Init>
  MX_UART7_Init();
 80005d8:	f000 fcaa 	bl	8000f30 <MX_UART7_Init>
  MX_UART8_Init();
 80005dc:	f000 fcd8 	bl	8000f90 <MX_UART8_Init>
  MX_RTC_Init();
 80005e0:	f000 fbac 	bl	8000d3c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); // ADS START
 80005e4:	2201      	movs	r2, #1
 80005e6:	2120      	movs	r1, #32
 80005e8:	482a      	ldr	r0, [pc, #168]	; (8000694 <main+0x110>)
 80005ea:	f002 fc25 	bl	8002e38 <HAL_GPIO_WritePin>
  msson=0;//son süreyi sıfıra eşitledik
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2110      	movs	r1, #16
 80005f8:	4826      	ldr	r0, [pc, #152]	; (8000694 <main+0x110>)
 80005fa:	f002 fc1d 	bl	8002e38 <HAL_GPIO_WritePin>

HAL_SPI_Transmit(&hspi1, &CONFIG0, 1, 100); //ADS CONFIG0 YAPILDI
 80005fe:	f107 016f 	add.w	r1, r7, #111	; 0x6f
 8000602:	2364      	movs	r3, #100	; 0x64
 8000604:	2201      	movs	r2, #1
 8000606:	4824      	ldr	r0, [pc, #144]	; (8000698 <main+0x114>)
 8000608:	f004 f8fe 	bl	8004808 <HAL_SPI_Transmit>
HAL_SPI_Transmit(&hspi1, &CONFIG1, 1, 100); //ADS CONFIG1 YAPILDI
 800060c:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	2201      	movs	r2, #1
 8000614:	4820      	ldr	r0, [pc, #128]	; (8000698 <main+0x114>)
 8000616:	f004 f8f7 	bl	8004808 <HAL_SPI_Transmit>
HAL_SPI_Transmit(&hspi1, &CONFIG2, 1, 100); //ADS CONFIG2 YAPILDI
 800061a:	f107 016d 	add.w	r1, r7, #109	; 0x6d
 800061e:	2364      	movs	r3, #100	; 0x64
 8000620:	2201      	movs	r2, #1
 8000622:	481d      	ldr	r0, [pc, #116]	; (8000698 <main+0x114>)
 8000624:	f004 f8f0 	bl	8004808 <HAL_SPI_Transmit>

HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2110      	movs	r1, #16
 800062c:	4819      	ldr	r0, [pc, #100]	; (8000694 <main+0x110>)
 800062e:	f002 fc03 	bl	8002e38 <HAL_GPIO_WritePin>

    /* USER CODE BEGIN 3 */

	     //BQ DAN VERİLER ALINACAK

	  MaxBataryaSicaklik();
 8000632:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000636:	469c      	mov	ip, r3
 8000638:	f000 fa0e 	bl	8000a58 <MaxBataryaSicaklik.9076>
	  GerilimHesap();
 800063c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000640:	469c      	mov	ip, r3
 8000642:	f000 f89d 	bl	8000780 <GerilimHesap.9062>
	  ADSRead();
 8000646:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800064a:	469c      	mov	ip, r3
 800064c:	f000 f8f2 	bl	8000834 <ADSRead.9066>
	  ADSChecksumControl();
 8000650:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000654:	469c      	mov	ip, r3
 8000656:	f000 f919 	bl	800088c <ADSChecksumControl.9068>
	  Sicaklik();
 800065a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800065e:	469c      	mov	ip, r3
 8000660:	f000 f8be 	bl	80007e0 <Sicaklik.9064>
	  Res();
 8000664:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000668:	469c      	mov	ip, r3
 800066a:	f000 f93c 	bl	80008e6 <Res.9070>
	  CalcCurrentVal();
 800066e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000672:	469c      	mov	ip, r3
 8000674:	f000 f942 	bl	80008fc <CalcCurrentVal.9072>
	  if (Current<0)
	  {
		  //hücre dengelemeleri yapılacak
	  }
	  CapasityCalc();
 8000678:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800067c:	469c      	mov	ip, r3
 800067e:	f000 f80d 	bl	800069c <CapasityCalc.9060>
	  CalcSOC();
 8000682:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000686:	469c      	mov	ip, r3
 8000688:	f000 f954 	bl	8000934 <CalcSOC.9074>
	  MaxBataryaSicaklik();
 800068c:	e7d1      	b.n	8000632 <main+0xae>
 800068e:	bf00      	nop
 8000690:	20000128 	.word	0x20000128
 8000694:	40020800 	.word	0x40020800
 8000698:	200002f0 	.word	0x200002f0

0800069c <CapasityCalc.9060>:
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4664      	mov	r4, ip
 80006a4:	f8c7 c004 	str.w	ip, [r7, #4]
	       HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 80006a8:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 80006ac:	2200      	movs	r2, #0
 80006ae:	4619      	mov	r1, r3
 80006b0:	4830      	ldr	r0, [pc, #192]	; (8000774 <CapasityCalc.9060+0xd8>)
 80006b2:	f003 fe31 	bl	8004318 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,&sDate,RTC_FORMAT_BIN); // Tarih ile ilgili çalisma yapilmasa dahi eklenmesi gereklidir.
 80006b6:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
 80006ba:	2200      	movs	r2, #0
 80006bc:	4619      	mov	r1, r3
 80006be:	482d      	ldr	r0, [pc, #180]	; (8000774 <CapasityCalc.9060+0xd8>)
 80006c0:	f003 ff30 	bl	8004524 <HAL_RTC_GetDate>
			milisaniye=sTime.SubSeconds;
 80006c4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80006c8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
			saniye=sTime.Seconds;
 80006cc:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 80006d0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
			dakika=sTime.Minutes;
 80006d4:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 80006d8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			saat=sTime.Hours;
 80006dc:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 80006e0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			mstoplam=milisaniye+saniye*1000+dakika*60000+saat*3600000; //toplam süre milisaniyeye çevirildi
 80006e4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80006e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006ec:	fb02 f203 	mul.w	r2, r2, r3
 80006f0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80006f4:	f64e 2160 	movw	r1, #60000	; 0xea60
 80006f8:	fb01 f303 	mul.w	r3, r1, r3
 80006fc:	4413      	add	r3, r2
 80006fe:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8000702:	441a      	add	r2, r3
 8000704:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000708:	491b      	ldr	r1, [pc, #108]	; (8000778 <CapasityCalc.9060+0xdc>)
 800070a:	fb01 f303 	mul.w	r3, r1, r3
 800070e:	4413      	add	r3, r2
 8000710:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
			msara=mstoplam-msson; // geçen süre hesaplandı
 8000714:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000718:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
			msson=mstoplam;
 8000722:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000726:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
			Ara_Tuketim=Current*Gerilim*msara; // anlık tüketim hesaplandı
 800072a:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
 800072e:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
 8000732:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000736:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800073a:	ee07 3a90 	vmov	s15, r3
 800073e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000746:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
			Toplam_Tuketim+=Ara_Tuketim;
 800074a:	ed94 7a1e 	vldr	s14, [r4, #120]	; 0x78
 800074e:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
 8000752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000756:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
			Toplam_Tuketim=Toplam_Tuketim/3600000; // watt/hour (Delta DoD)
 800075a:	ed94 7a1e 	vldr	s14, [r4, #120]	; 0x78
 800075e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800077c <CapasityCalc.9060+0xe0>
 8000762:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000766:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	bd90      	pop	{r4, r7, pc}
 8000772:	bf00      	nop
 8000774:	200001d0 	.word	0x200001d0
 8000778:	0036ee80 	.word	0x0036ee80
 800077c:	4a5bba00 	.word	0x4a5bba00

08000780 <GerilimHesap.9062>:
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4663      	mov	r3, ip
 8000788:	f8c7 c004 	str.w	ip, [r7, #4]
Gerilim=GerSic[0]*0.0008056640625; //adc değerini gerilime çevirdik
 800078c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800078e:	ee07 2a90 	vmov	s15, r2
 8000792:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000796:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80007d0 <GerilimHesap.9062+0x50>
 800079a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800079e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007a2:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
Gerilim*=41.00041; // gerilim bölücü oranı ile çarparak gerçek değeri elde ettik
 80007a6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80007aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007ae:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80007d8 <GerilimHesap.9062+0x58>
 80007b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007ba:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	f3af 8000 	nop.w
 80007d0:	66666666 	.word	0x66666666
 80007d4:	3f4a6666 	.word	0x3f4a6666
 80007d8:	6f544bb2 	.word	0x6f544bb2
 80007dc:	4044800d 	.word	0x4044800d

080007e0 <Sicaklik.9064>:
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4663      	mov	r3, ip
 80007e8:	f8c7 c004 	str.w	ip, [r7, #4]
	ShuntSicaklik=GerSic[1]*0.0008056640625; // adc değerini gerilime çevirdik
 80007ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80007ee:	ee07 2a90 	vmov	s15, r2
 80007f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007f6:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000828 <Sicaklik.9064+0x48>
 80007fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000802:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	ShuntSicaklik*=100; //dataheette gerek sıcaklık değeri için 100 çarpılması gerek
 8000806:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800080a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000830 <Sicaklik.9064+0x50>
 800080e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000812:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	f3af 8000 	nop.w
 8000828:	66666666 	.word	0x66666666
 800082c:	3f4a6666 	.word	0x3f4a6666
 8000830:	42c80000 	.word	0x42c80000

08000834 <ADSRead.9066>:
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4664      	mov	r4, ip
 800083c:	f8c7 c004 	str.w	ip, [r7, #4]
	DRDY= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000840:	2110      	movs	r1, #16
 8000842:	480f      	ldr	r0, [pc, #60]	; (8000880 <ADSRead.9066+0x4c>)
 8000844:	f002 fae0 	bl	8002e08 <HAL_GPIO_ReadPin>
 8000848:	4603      	mov	r3, r0
 800084a:	66a3      	str	r3, [r4, #104]	; 0x68
	if (DRDY=0)
 800084c:	2300      	movs	r3, #0
 800084e:	66a3      	str	r3, [r4, #104]	; 0x68
 8000850:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8000852:	2b00      	cmp	r3, #0
 8000854:	d010      	beq.n	8000878 <ADSRead.9066+0x44>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOJIK 0
 8000856:	2200      	movs	r2, #0
 8000858:	2110      	movs	r1, #16
 800085a:	480a      	ldr	r0, [pc, #40]	; (8000884 <ADSRead.9066+0x50>)
 800085c:	f002 faec 	bl	8002e38 <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1, RXADS, 4, 100);               // SPI DAN AKIM VERİSİ ALDIK
 8000860:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
 8000864:	2364      	movs	r3, #100	; 0x64
 8000866:	2204      	movs	r2, #4
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <ADSRead.9066+0x54>)
 800086a:	f004 f933 	bl	8004ad4 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);   //CS LOJIK 1
 800086e:	2201      	movs	r2, #1
 8000870:	2110      	movs	r1, #16
 8000872:	4804      	ldr	r0, [pc, #16]	; (8000884 <ADSRead.9066+0x50>)
 8000874:	f002 fae0 	bl	8002e38 <HAL_GPIO_WritePin>
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bd90      	pop	{r4, r7, pc}
 8000880:	40020000 	.word	0x40020000
 8000884:	40020800 	.word	0x40020800
 8000888:	200002f0 	.word	0x200002f0

0800088c <ADSChecksumControl.9068>:
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4664      	mov	r4, ip
 8000894:	f8c7 c004 	str.w	ip, [r7, #4]
 ChecksumGelen= RXADS[3];
 8000898:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
 800089c:	6663      	str	r3, [r4, #100]	; 0x64
 ADSGelenVeri= (int) RXADS[0]*100+ (int) RXADS[1]*10+ (int) RXADS[2];
 800089e:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 80008a2:	461a      	mov	r2, r3
 80008a4:	2364      	movs	r3, #100	; 0x64
 80008a6:	fb03 f202 	mul.w	r2, r3, r2
 80008aa:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
 80008ae:	4619      	mov	r1, r3
 80008b0:	460b      	mov	r3, r1
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	440b      	add	r3, r1
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	4413      	add	r3, r2
 80008ba:	f894 20be 	ldrb.w	r2, [r4, #190]	; 0xbe
 80008be:	4413      	add	r3, r2
 80008c0:	6623      	str	r3, [r4, #96]	; 0x60
 ChecksumBulunan= calcChecksum(ADSGelenVeri, 3);
 80008c2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80008c4:	46a4      	mov	ip, r4
 80008c6:	2103      	movs	r1, #3
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fe35 	bl	8000538 <calcChecksum.9053>
 80008ce:	4603      	mov	r3, r0
 80008d0:	65e3      	str	r3, [r4, #92]	; 0x5c
if (ChecksumBulunan == ChecksumGelen)
 80008d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80008d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d101      	bne.n	80008de <ADSChecksumControl.9068+0x52>
	PreCurrent= ADSGelenVeri;
 80008da:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80008dc:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd90      	pop	{r4, r7, pc}

080008e6 <Res.9070>:
{
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	f8c7 c004 	str.w	ip, [r7, #4]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <CalcCurrentVal.9072>:
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4662      	mov	r2, ip
 8000904:	f8c7 c004 	str.w	ip, [r7, #4]
	Current=PreCurrent/100 ; // I = V/R
 8000908:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800090a:	4909      	ldr	r1, [pc, #36]	; (8000930 <CalcCurrentVal.9072+0x34>)
 800090c:	fb81 0103 	smull	r0, r1, r1, r3
 8000910:	1149      	asrs	r1, r1, #5
 8000912:	17db      	asrs	r3, r3, #31
 8000914:	1acb      	subs	r3, r1, r3
 8000916:	ee07 3a90 	vmov	s15, r3
 800091a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800091e:	edc2 7a21 	vstr	s15, [r2, #132]	; 0x84
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	51eb851f 	.word	0x51eb851f

08000934 <CalcSOC.9074>:
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4664      	mov	r4, ip
 800093c:	f8c7 c004 	str.w	ip, [r7, #4]
 DDoD=Toplam_Tuketim*100/C_DS;
 8000940:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
 8000944:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000a48 <CalcSOC.9074+0x114>
 8000948:	ee27 7a87 	vmul.f32	s14, s15, s14
 800094c:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8000a4c <CalcSOC.9074+0x118>
 8000950:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000954:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
 if (Current>0) // dıscharge
 8000958:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
 800095c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000964:	dd2d      	ble.n	80009c2 <CalcSOC.9074+0x8e>
	 if (Gerilim<=Vmin)
 8000966:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
 800096a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8000a48 <CalcSOC.9074+0x114>
 800096e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000976:	d806      	bhi.n	8000986 <CalcSOC.9074+0x52>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097e:	4834      	ldr	r0, [pc, #208]	; (8000a50 <CalcSOC.9074+0x11c>)
 8000980:	f002 fa5a 	bl	8002e38 <HAL_GPIO_WritePin>
 8000984:	e053      	b.n	8000a2e <CalcSOC.9074+0xfa>
	 else if (Gerilim> Vmin)
 8000986:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
 800098a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000a48 <CalcSOC.9074+0x114>
 800098e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000996:	dd4a      	ble.n	8000a2e <CalcSOC.9074+0xfa>
		 DoD=ilkDoD+ nD*DDoD;
 8000998:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
 800099c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000a48 <CalcSOC.9074+0x114>
 80009a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009a4:	ed94 7a14 	vldr	s14, [r4, #80]	; 0x50
 80009a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009ac:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
         SOC=SOH - DoD;
 80009b0:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 80009b4:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 80009b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009bc:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
 80009c0:	e035      	b.n	8000a2e <CalcSOC.9074+0xfa>
 else if (Current<0) //charge
 80009c2:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
 80009c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ce:	d52e      	bpl.n	8000a2e <CalcSOC.9074+0xfa>
	 if(Gerilim== Vmax)
 80009d0:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
 80009d4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000a54 <CalcSOC.9074+0x120>
 80009d8:	eef4 7a47 	vcmp.f32	s15, s14
 80009dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009e0:	d108      	bne.n	80009f4 <CalcSOC.9074+0xc0>
		 SOH=SOC-DoD;
 80009e2:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
 80009e6:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 80009ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ee:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
 80009f2:	e01c      	b.n	8000a2e <CalcSOC.9074+0xfa>
	 else if (Gerilim<=Vmax)
 80009f4:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
 80009f8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000a54 <CalcSOC.9074+0x120>
 80009fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a04:	d813      	bhi.n	8000a2e <CalcSOC.9074+0xfa>
		 DoD=ilkDoD+ nC*DDoD;
 8000a06:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
 8000a0a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000a48 <CalcSOC.9074+0x114>
 8000a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a12:	ed94 7a14 	vldr	s14, [r4, #80]	; 0x50
 8000a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a1a:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
		 SOC=SOH-DoD;
 8000a1e:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8000a22:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 8000a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a2a:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
 SOC=SOH-DoD;
 8000a2e:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8000a32:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 8000a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a3a:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd90      	pop	{r4, r7, pc}
 8000a46:	bf00      	nop
 8000a48:	42c80000 	.word	0x42c80000
 8000a4c:	451c4000 	.word	0x451c4000
 8000a50:	40020800 	.word	0x40020800
 8000a54:	43070000 	.word	0x43070000

08000a58 <MaxBataryaSicaklik.9076>:
 {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4663      	mov	r3, ip
 8000a60:	f8c7 c004 	str.w	ip, [r7, #4]
	 for(int i=1; i<16; i++){
 8000a64:	2201      	movs	r2, #1
 8000a66:	60fa      	str	r2, [r7, #12]
 8000a68:	e010      	b.n	8000a8c <MaxBataryaSicaklik.9076+0x34>
		 MaxSic = BataryaSicaklik[0];       //ilk sıcaklık max sıcaklık olur
 8000a6a:	685a      	ldr	r2, [r3, #4]
 8000a6c:	601a      	str	r2, [r3, #0]
		 if (MaxSic<BataryaSicaklik[i])     //eğer sonraki sıcaklık öncekinden büyükse maxsıc büyük değer olur
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	441a      	add	r2, r3
 8000a74:	6852      	ldr	r2, [r2, #4]
 8000a76:	6819      	ldr	r1, [r3, #0]
 8000a78:	4291      	cmp	r1, r2
 8000a7a:	da04      	bge.n	8000a86 <MaxBataryaSicaklik.9076+0x2e>
		    MaxSic=BataryaSicaklik[i];
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	0092      	lsls	r2, r2, #2
 8000a80:	441a      	add	r2, r3
 8000a82:	6852      	ldr	r2, [r2, #4]
 8000a84:	601a      	str	r2, [r3, #0]
	 for(int i=1; i<16; i++){
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	3201      	adds	r2, #1
 8000a8a:	60fa      	str	r2, [r7, #12]
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	2a0f      	cmp	r2, #15
 8000a90:	ddeb      	ble.n	8000a6a <MaxBataryaSicaklik.9076+0x12>
	 if (MaxSic>=55)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	2a36      	cmp	r2, #54	; 0x36
 8000a96:	dd05      	ble.n	8000aa4 <MaxBataryaSicaklik.9076+0x4c>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); //SICAKLIK 55 İ GEÇTİ�?İNDE BUZZER ÇALI�?IR
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2180      	movs	r1, #128	; 0x80
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <MaxBataryaSicaklik.9076+0x7c>)
 8000a9e:	f002 f9cb 	bl	8002e38 <HAL_GPIO_WritePin>
 }
 8000aa2:	e012      	b.n	8000aca <MaxBataryaSicaklik.9076+0x72>
	 else if (MaxSic>=70)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	2a45      	cmp	r2, #69	; 0x45
 8000aa8:	dd06      	ble.n	8000ab8 <MaxBataryaSicaklik.9076+0x60>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); //SICAKLIK 70 İ GEÇTİ�?İNDE ARAÇ KAPANIR
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab0:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <MaxBataryaSicaklik.9076+0x7c>)
 8000ab2:	f002 f9c1 	bl	8002e38 <HAL_GPIO_WritePin>
 }
 8000ab6:	e008      	b.n	8000aca <MaxBataryaSicaklik.9076+0x72>
	 else if (MaxSic<55)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b36      	cmp	r3, #54	; 0x36
 8000abc:	dc05      	bgt.n	8000aca <MaxBataryaSicaklik.9076+0x72>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_RESET); //SICAKLIK 55 DEN KÜÇÜKSE RÖLELER KAPALI
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000ac4:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <MaxBataryaSicaklik.9076+0x7c>)
 8000ac6:	f002 f9b7 	bl	8002e38 <HAL_GPIO_WritePin>
 }
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40020800 	.word	0x40020800

08000ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b0b8      	sub	sp, #224	; 0xe0
 8000adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ae2:	2234      	movs	r2, #52	; 0x34
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f005 f922 	bl	8005d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	2290      	movs	r2, #144	; 0x90
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f005 f913 	bl	8005d30 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b3f      	ldr	r3, [pc, #252]	; (8000c08 <SystemClock_Config+0x130>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a3e      	ldr	r2, [pc, #248]	; (8000c08 <SystemClock_Config+0x130>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
 8000b16:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <SystemClock_Config+0x130>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b22:	4b3a      	ldr	r3, [pc, #232]	; (8000c0c <SystemClock_Config+0x134>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a39      	ldr	r2, [pc, #228]	; (8000c0c <SystemClock_Config+0x134>)
 8000b28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b2c:	6013      	str	r3, [r2, #0]
 8000b2e:	4b37      	ldr	r3, [pc, #220]	; (8000c0c <SystemClock_Config+0x134>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b3a:	2309      	movs	r3, #9
 8000b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b62:	23d8      	movs	r3, #216	; 0xd8
 8000b64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b74:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 f9c7 	bl	8002f0c <HAL_RCC_OscConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000b84:	f000 fafa 	bl	800117c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b88:	f002 f970 	bl	8002e6c <HAL_PWREx_EnableOverDrive>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000b92:	f000 faf3 	bl	800117c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b96:	230f      	movs	r3, #15
 8000b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ba8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000bb8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000bbc:	2107      	movs	r1, #7
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f002 fc52 	bl	8003468 <HAL_RCC_ClockConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000bca:	f000 fad7 	bl	800117c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8000bce:	f243 6320 	movw	r3, #13856	; 0x3620
 8000bd2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_UART8;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f002 fe32 	bl	8003858 <HAL_RCCEx_PeriphCLKConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x126>
  {
    Error_Handler();
 8000bfa:	f000 fabf 	bl	800117c <Error_Handler>
  }
}
 8000bfe:	bf00      	nop
 8000c00:	37e0      	adds	r7, #224	; 0xe0
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40007000 	.word	0x40007000

08000c10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c16:	463b      	mov	r3, r7
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c22:	4b28      	ldr	r3, [pc, #160]	; (8000cc4 <MX_ADC1_Init+0xb4>)
 8000c24:	4a28      	ldr	r2, [pc, #160]	; (8000cc8 <MX_ADC1_Init+0xb8>)
 8000c26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c28:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <MX_ADC1_Init+0xb4>)
 8000c2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c30:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <MX_ADC1_Init+0xb4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <MX_ADC1_Init+0xb4>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c3c:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <MX_ADC1_Init+0xb4>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <MX_ADC1_Init+0xb4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <MX_ADC1_Init+0xb4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c50:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_ADC1_Init+0xb4>)
 8000c52:	4a1e      	ldr	r2, [pc, #120]	; (8000ccc <MX_ADC1_Init+0xbc>)
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_ADC1_Init+0xb4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000c5c:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_ADC1_Init+0xb4>)
 8000c5e:	2202      	movs	r2, #2
 8000c60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_ADC1_Init+0xb4>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <MX_ADC1_Init+0xb4>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c70:	4814      	ldr	r0, [pc, #80]	; (8000cc4 <MX_ADC1_Init+0xb4>)
 8000c72:	f000 fd85 	bl	8001780 <HAL_ADC_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c7c:	f000 fa7e 	bl	800117c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c80:	230b      	movs	r3, #11
 8000c82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c84:	2301      	movs	r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000c88:	2307      	movs	r3, #7
 8000c8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <MX_ADC1_Init+0xb4>)
 8000c92:	f000 fec5 	bl	8001a20 <HAL_ADC_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c9c:	f000 fa6e 	bl	800117c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ca0:	2309      	movs	r3, #9
 8000ca2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_ADC1_Init+0xb4>)
 8000cae:	f000 feb7 	bl	8001a20 <HAL_ADC_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000cb8:	f000 fa60 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000128 	.word	0x20000128
 8000cc8:	40012000 	.word	0x40012000
 8000ccc:	0f000001 	.word	0x0f000001

08000cd0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_CAN1_Init+0x64>)
 8000cd6:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <MX_CAN1_Init+0x68>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_CAN1_Init+0x64>)
 8000cdc:	2210      	movs	r2, #16
 8000cde:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_CAN1_Init+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_CAN1_Init+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_CAN1_Init+0x64>)
 8000cee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cf2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_CAN1_Init+0x64>)
 8000cf6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000cfa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <MX_CAN1_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_CAN1_Init+0x64>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <MX_CAN1_Init+0x64>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_CAN1_Init+0x64>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <MX_CAN1_Init+0x64>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_CAN1_Init+0x64>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_CAN1_Init+0x64>)
 8000d22:	f001 f943 	bl	8001fac <HAL_CAN_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000d2c:	f000 fa26 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000354 	.word	0x20000354
 8000d38:	40006400 	.word	0x40006400

08000d3c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]
 8000d52:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000d54:	2300      	movs	r3, #0
 8000d56:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <MX_RTC_Init+0xb0>)
 8000d5a:	4a25      	ldr	r2, [pc, #148]	; (8000df0 <MX_RTC_Init+0xb4>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d5e:	4b23      	ldr	r3, [pc, #140]	; (8000dec <MX_RTC_Init+0xb0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d64:	4b21      	ldr	r3, [pc, #132]	; (8000dec <MX_RTC_Init+0xb0>)
 8000d66:	227f      	movs	r2, #127	; 0x7f
 8000d68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d6a:	4b20      	ldr	r3, [pc, #128]	; (8000dec <MX_RTC_Init+0xb0>)
 8000d6c:	22ff      	movs	r2, #255	; 0xff
 8000d6e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <MX_RTC_Init+0xb0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d76:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <MX_RTC_Init+0xb0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_RTC_Init+0xb0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d82:	481a      	ldr	r0, [pc, #104]	; (8000dec <MX_RTC_Init+0xb0>)
 8000d84:	f003 f98e 	bl	80040a4 <HAL_RTC_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000d8e:	f000 f9f5 	bl	800117c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	2200      	movs	r2, #0
 8000dac:	4619      	mov	r1, r3
 8000dae:	480f      	ldr	r0, [pc, #60]	; (8000dec <MX_RTC_Init+0xb0>)
 8000db0:	f003 f9f4 	bl	800419c <HAL_RTC_SetTime>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000dba:	f000 f9df 	bl	800117c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	717b      	strb	r3, [r7, #5]
  sDate.Date = 1;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 20;
 8000dca:	2314      	movs	r3, #20
 8000dcc:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_RTC_Init+0xb0>)
 8000dd6:	f003 fafd 	bl	80043d4 <HAL_RTC_SetDate>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000de0:	f000 f9cc 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000de4:	bf00      	nop
 8000de6:	3720      	adds	r7, #32
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200001d0 	.word	0x200001d0
 8000df0:	40002800 	.word	0x40002800

08000df4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <MX_SPI1_Init+0x74>)
 8000dfa:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <MX_SPI1_Init+0x78>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_SPI1_Init+0x74>)
 8000e00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_SPI1_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <MX_SPI1_Init+0x74>)
 8000e0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e12:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <MX_SPI1_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <MX_SPI1_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <MX_SPI1_Init+0x74>)
 8000e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e26:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <MX_SPI1_Init+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <MX_SPI1_Init+0x74>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_SPI1_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <MX_SPI1_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MX_SPI1_Init+0x74>)
 8000e42:	2207      	movs	r2, #7
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <MX_SPI1_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_SPI1_Init+0x74>)
 8000e4e:	2208      	movs	r2, #8
 8000e50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_SPI1_Init+0x74>)
 8000e54:	f003 fc46 	bl	80046e4 <HAL_SPI_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e5e:	f000 f98d 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200002f0 	.word	0x200002f0
 8000e6c:	40013000 	.word	0x40013000

08000e70 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_UART4_Init+0x58>)
 8000e76:	4a15      	ldr	r2, [pc, #84]	; (8000ecc <MX_UART4_Init+0x5c>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_UART4_Init+0x58>)
 8000e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e80:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_UART4_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_UART4_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_UART4_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_UART4_Init+0x58>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_UART4_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_UART4_Init+0x58>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <MX_UART4_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_UART4_Init+0x58>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_UART4_Init+0x58>)
 8000eb4:	f004 fabe 	bl	8005434 <HAL_UART_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000ebe:	f000 f95d 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000270 	.word	0x20000270
 8000ecc:	40004c00 	.word	0x40004c00

08000ed0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_UART5_Init+0x58>)
 8000ed6:	4a15      	ldr	r2, [pc, #84]	; (8000f2c <MX_UART5_Init+0x5c>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <MX_UART5_Init+0x58>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_UART5_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_UART5_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_UART5_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_UART5_Init+0x58>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_UART5_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_UART5_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_UART5_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_UART5_Init+0x58>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_UART5_Init+0x58>)
 8000f14:	f004 fa8e 	bl	8005434 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000f1e:	f000 f92d 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200000a8 	.word	0x200000a8
 8000f2c:	40005000 	.word	0x40005000

08000f30 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_UART7_Init+0x58>)
 8000f36:	4a15      	ldr	r2, [pc, #84]	; (8000f8c <MX_UART7_Init+0x5c>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_UART7_Init+0x58>)
 8000f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f40:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_UART7_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_UART7_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_UART7_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_UART7_Init+0x58>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_UART7_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_UART7_Init+0x58>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_UART7_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_UART7_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_UART7_Init+0x58>)
 8000f74:	f004 fa5e 	bl	8005434 <HAL_UART_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000f7e:	f000 f8fd 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000028 	.word	0x20000028
 8000f8c:	40007800 	.word	0x40007800

08000f90 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_UART8_Init+0x58>)
 8000f96:	4a15      	ldr	r2, [pc, #84]	; (8000fec <MX_UART8_Init+0x5c>)
 8000f98:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_UART8_Init+0x58>)
 8000f9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_UART8_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_UART8_Init+0x58>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_UART8_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_UART8_Init+0x58>)
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <MX_UART8_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_UART8_Init+0x58>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <MX_UART8_Init+0x58>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <MX_UART8_Init+0x58>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_UART8_Init+0x58>)
 8000fd4:	f004 fa2e 	bl	8005434 <HAL_UART_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8000fde:	f000 f8cd 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200001f0 	.word	0x200001f0
 8000fec:	40007c00 	.word	0x40007c00

08000ff0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_DMA_Init+0x38>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <MX_DMA_Init+0x38>)
 8000ffc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_DMA_Init+0x38>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2038      	movs	r0, #56	; 0x38
 8001014:	f001 f9a1 	bl	800235a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001018:	2038      	movs	r0, #56	; 0x38
 800101a:	f001 f9ba 	bl	8002392 <HAL_NVIC_EnableIRQ>

}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08c      	sub	sp, #48	; 0x30
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001042:	4b4a      	ldr	r3, [pc, #296]	; (800116c <MX_GPIO_Init+0x140>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a49      	ldr	r2, [pc, #292]	; (800116c <MX_GPIO_Init+0x140>)
 8001048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b47      	ldr	r3, [pc, #284]	; (800116c <MX_GPIO_Init+0x140>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	4b44      	ldr	r3, [pc, #272]	; (800116c <MX_GPIO_Init+0x140>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a43      	ldr	r2, [pc, #268]	; (800116c <MX_GPIO_Init+0x140>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b41      	ldr	r3, [pc, #260]	; (800116c <MX_GPIO_Init+0x140>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b3e      	ldr	r3, [pc, #248]	; (800116c <MX_GPIO_Init+0x140>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a3d      	ldr	r2, [pc, #244]	; (800116c <MX_GPIO_Init+0x140>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b3b      	ldr	r3, [pc, #236]	; (800116c <MX_GPIO_Init+0x140>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b38      	ldr	r3, [pc, #224]	; (800116c <MX_GPIO_Init+0x140>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a37      	ldr	r2, [pc, #220]	; (800116c <MX_GPIO_Init+0x140>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b35      	ldr	r3, [pc, #212]	; (800116c <MX_GPIO_Init+0x140>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a2:	4b32      	ldr	r3, [pc, #200]	; (800116c <MX_GPIO_Init+0x140>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a31      	ldr	r2, [pc, #196]	; (800116c <MX_GPIO_Init+0x140>)
 80010a8:	f043 0310 	orr.w	r3, r3, #16
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b2f      	ldr	r3, [pc, #188]	; (800116c <MX_GPIO_Init+0x140>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ba:	4b2c      	ldr	r3, [pc, #176]	; (800116c <MX_GPIO_Init+0x140>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a2b      	ldr	r2, [pc, #172]	; (800116c <MX_GPIO_Init+0x140>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b29      	ldr	r3, [pc, #164]	; (800116c <MX_GPIO_Init+0x140>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	210f      	movs	r1, #15
 80010d6:	4826      	ldr	r0, [pc, #152]	; (8001170 <MX_GPIO_Init+0x144>)
 80010d8:	f001 feae 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPICS_Pin|ADS_START_Pin|ROLE_1_Pin|ROLE_2_Pin
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 80010e2:	4824      	ldr	r0, [pc, #144]	; (8001174 <MX_GPIO_Init+0x148>)
 80010e4:	f001 fea8 	bl	8002e38 <HAL_GPIO_WritePin>
                          |ROLE_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADS_RST_Pin|RTS_Pin|CTS_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f240 3101 	movw	r1, #769	; 0x301
 80010ee:	4822      	ldr	r0, [pc, #136]	; (8001178 <MX_GPIO_Init+0x14c>)
 80010f0:	f001 fea2 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 80010f4:	230f      	movs	r3, #15
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4819      	ldr	r0, [pc, #100]	; (8001170 <MX_GPIO_Init+0x144>)
 800110c:	f001 fcd2 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001110:	2310      	movs	r3, #16
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	4619      	mov	r1, r3
 8001122:	4813      	ldr	r0, [pc, #76]	; (8001170 <MX_GPIO_Init+0x144>)
 8001124:	f001 fcc6 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPICS_Pin ADS_START_Pin ROLE_1_Pin ROLE_2_Pin
                           ROLE_3_Pin */
  GPIO_InitStruct.Pin = SPICS_Pin|ADS_START_Pin|ROLE_1_Pin|ROLE_2_Pin
 8001128:	f44f 736c 	mov.w	r3, #944	; 0x3b0
 800112c:	61fb      	str	r3, [r7, #28]
                          |ROLE_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <MX_GPIO_Init+0x148>)
 8001142:	f001 fcb7 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADS_RST_Pin RTS_Pin CTS_Pin */
  GPIO_InitStruct.Pin = ADS_RST_Pin|RTS_Pin|CTS_Pin;
 8001146:	f240 3301 	movw	r3, #769	; 0x301
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <MX_GPIO_Init+0x14c>)
 8001160:	f001 fca8 	bl	8002ab4 <HAL_GPIO_Init>

}
 8001164:	bf00      	nop
 8001166:	3730      	adds	r7, #48	; 0x30
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800
 8001170:	40020000 	.word	0x40020000
 8001174:	40020800 	.word	0x40020800
 8001178:	40020400 	.word	0x40020400

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001182:	e7fe      	b.n	8001182 <Error_Handler+0x6>

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <HAL_MspInit+0x44>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <HAL_MspInit+0x44>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_MspInit+0x44>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_MspInit+0x44>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	4a08      	ldr	r2, [pc, #32]	; (80011c8 <HAL_MspInit+0x44>)
 80011a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ac:	6453      	str	r3, [r2, #68]	; 0x44
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_MspInit+0x44>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a39      	ldr	r2, [pc, #228]	; (80012d0 <HAL_ADC_MspInit+0x104>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d16b      	bne.n	80012c6 <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ee:	4b39      	ldr	r3, [pc, #228]	; (80012d4 <HAL_ADC_MspInit+0x108>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a38      	ldr	r2, [pc, #224]	; (80012d4 <HAL_ADC_MspInit+0x108>)
 80011f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <HAL_ADC_MspInit+0x108>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b33      	ldr	r3, [pc, #204]	; (80012d4 <HAL_ADC_MspInit+0x108>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a32      	ldr	r2, [pc, #200]	; (80012d4 <HAL_ADC_MspInit+0x108>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <HAL_ADC_MspInit+0x108>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <HAL_ADC_MspInit+0x108>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a2c      	ldr	r2, [pc, #176]	; (80012d4 <HAL_ADC_MspInit+0x108>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <HAL_ADC_MspInit+0x108>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = G2_7_OUT_Pin;
 8001236:	2302      	movs	r3, #2
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123a:	2303      	movs	r3, #3
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(G2_7_OUT_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4823      	ldr	r0, [pc, #140]	; (80012d8 <HAL_ADC_MspInit+0x10c>)
 800124a:	f001 fc33 	bl	8002ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TOUT_Pin;
 800124e:	2302      	movs	r3, #2
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001252:	2303      	movs	r3, #3
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TOUT_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	481e      	ldr	r0, [pc, #120]	; (80012dc <HAL_ADC_MspInit+0x110>)
 8001262:	f001 fc27 	bl	8002ab4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <HAL_ADC_MspInit+0x114>)
 8001268:	4a1e      	ldr	r2, [pc, #120]	; (80012e4 <HAL_ADC_MspInit+0x118>)
 800126a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <HAL_ADC_MspInit+0x114>)
 800126e:	2200      	movs	r2, #0
 8001270:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <HAL_ADC_MspInit+0x114>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_ADC_MspInit+0x114>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_ADC_MspInit+0x114>)
 8001280:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001284:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <HAL_ADC_MspInit+0x114>)
 8001288:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800128c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_ADC_MspInit+0x114>)
 8001290:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001294:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_ADC_MspInit+0x114>)
 8001298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800129c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_ADC_MspInit+0x114>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_ADC_MspInit+0x114>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <HAL_ADC_MspInit+0x114>)
 80012ac:	f001 f88c 	bl	80023c8 <HAL_DMA_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 80012b6:	f7ff ff61 	bl	800117c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <HAL_ADC_MspInit+0x114>)
 80012be:	639a      	str	r2, [r3, #56]	; 0x38
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <HAL_ADC_MspInit+0x114>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40012000 	.word	0x40012000
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020400 	.word	0x40020400
 80012e0:	20000170 	.word	0x20000170
 80012e4:	40026410 	.word	0x40026410

080012e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a17      	ldr	r2, [pc, #92]	; (8001364 <HAL_CAN_MspInit+0x7c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d127      	bne.n	800135a <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <HAL_CAN_MspInit+0x80>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a16      	ldr	r2, [pc, #88]	; (8001368 <HAL_CAN_MspInit+0x80>)
 8001310:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_CAN_MspInit+0x80>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_CAN_MspInit+0x80>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a10      	ldr	r2, [pc, #64]	; (8001368 <HAL_CAN_MspInit+0x80>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_CAN_MspInit+0x80>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800133a:	2303      	movs	r3, #3
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800134a:	2309      	movs	r3, #9
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <HAL_CAN_MspInit+0x84>)
 8001356:	f001 fbad 	bl	8002ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800135a:	bf00      	nop
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40006400 	.word	0x40006400
 8001368:	40023800 	.word	0x40023800
 800136c:	40020c00 	.word	0x40020c00

08001370 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <HAL_RTC_MspInit+0x2c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d105      	bne.n	800138e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <HAL_RTC_MspInit+0x30>)
 8001384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001386:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_RTC_MspInit+0x30>)
 8001388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800138c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40002800 	.word	0x40002800
 80013a0:	40023800 	.word	0x40023800

080013a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <HAL_SPI_MspInit+0x7c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d127      	bne.n	8001416 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <HAL_SPI_MspInit+0x80>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	4a16      	ldr	r2, [pc, #88]	; (8001424 <HAL_SPI_MspInit+0x80>)
 80013cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013d0:	6453      	str	r3, [r2, #68]	; 0x44
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <HAL_SPI_MspInit+0x80>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_SPI_MspInit+0x80>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a10      	ldr	r2, [pc, #64]	; (8001424 <HAL_SPI_MspInit+0x80>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_SPI_MspInit+0x80>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013f6:	23e0      	movs	r3, #224	; 0xe0
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001406:	2305      	movs	r3, #5
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <HAL_SPI_MspInit+0x84>)
 8001412:	f001 fb4f 	bl	8002ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	; 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40013000 	.word	0x40013000
 8001424:	40023800 	.word	0x40023800
 8001428:	40020000 	.word	0x40020000

0800142c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b090      	sub	sp, #64	; 0x40
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a5d      	ldr	r2, [pc, #372]	; (80015c0 <HAL_UART_MspInit+0x194>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d129      	bne.n	80014a2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800144e:	4b5d      	ldr	r3, [pc, #372]	; (80015c4 <HAL_UART_MspInit+0x198>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a5c      	ldr	r2, [pc, #368]	; (80015c4 <HAL_UART_MspInit+0x198>)
 8001454:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b5a      	ldr	r3, [pc, #360]	; (80015c4 <HAL_UART_MspInit+0x198>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
 8001464:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	4b57      	ldr	r3, [pc, #348]	; (80015c4 <HAL_UART_MspInit+0x198>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a56      	ldr	r2, [pc, #344]	; (80015c4 <HAL_UART_MspInit+0x198>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b54      	ldr	r3, [pc, #336]	; (80015c4 <HAL_UART_MspInit+0x198>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800147e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8001490:	2306      	movs	r3, #6
 8001492:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001498:	4619      	mov	r1, r3
 800149a:	484b      	ldr	r0, [pc, #300]	; (80015c8 <HAL_UART_MspInit+0x19c>)
 800149c:	f001 fb0a 	bl	8002ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 80014a0:	e08a      	b.n	80015b8 <HAL_UART_MspInit+0x18c>
  else if(huart->Instance==UART5)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a49      	ldr	r2, [pc, #292]	; (80015cc <HAL_UART_MspInit+0x1a0>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d129      	bne.n	8001500 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_UART5_CLK_ENABLE();
 80014ac:	4b45      	ldr	r3, [pc, #276]	; (80015c4 <HAL_UART_MspInit+0x198>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	4a44      	ldr	r2, [pc, #272]	; (80015c4 <HAL_UART_MspInit+0x198>)
 80014b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014b6:	6413      	str	r3, [r2, #64]	; 0x40
 80014b8:	4b42      	ldr	r3, [pc, #264]	; (80015c4 <HAL_UART_MspInit+0x198>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c0:	623b      	str	r3, [r7, #32]
 80014c2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c4:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <HAL_UART_MspInit+0x198>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4a3e      	ldr	r2, [pc, #248]	; (80015c4 <HAL_UART_MspInit+0x198>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
 80014d0:	4b3c      	ldr	r3, [pc, #240]	; (80015c4 <HAL_UART_MspInit+0x198>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80014dc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80014ee:	2308      	movs	r3, #8
 80014f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f6:	4619      	mov	r1, r3
 80014f8:	4835      	ldr	r0, [pc, #212]	; (80015d0 <HAL_UART_MspInit+0x1a4>)
 80014fa:	f001 fadb 	bl	8002ab4 <HAL_GPIO_Init>
}
 80014fe:	e05b      	b.n	80015b8 <HAL_UART_MspInit+0x18c>
  else if(huart->Instance==UART7)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a33      	ldr	r2, [pc, #204]	; (80015d4 <HAL_UART_MspInit+0x1a8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d129      	bne.n	800155e <HAL_UART_MspInit+0x132>
    __HAL_RCC_UART7_CLK_ENABLE();
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <HAL_UART_MspInit+0x198>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a2d      	ldr	r2, [pc, #180]	; (80015c4 <HAL_UART_MspInit+0x198>)
 8001510:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <HAL_UART_MspInit+0x198>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800151e:	61bb      	str	r3, [r7, #24]
 8001520:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <HAL_UART_MspInit+0x198>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a27      	ldr	r2, [pc, #156]	; (80015c4 <HAL_UART_MspInit+0x198>)
 8001528:	f043 0310 	orr.w	r3, r3, #16
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <HAL_UART_MspInit+0x198>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800153a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800154c:	2308      	movs	r3, #8
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001554:	4619      	mov	r1, r3
 8001556:	4820      	ldr	r0, [pc, #128]	; (80015d8 <HAL_UART_MspInit+0x1ac>)
 8001558:	f001 faac 	bl	8002ab4 <HAL_GPIO_Init>
}
 800155c:	e02c      	b.n	80015b8 <HAL_UART_MspInit+0x18c>
  else if(huart->Instance==UART8)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1e      	ldr	r2, [pc, #120]	; (80015dc <HAL_UART_MspInit+0x1b0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d127      	bne.n	80015b8 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_UART_MspInit+0x198>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <HAL_UART_MspInit+0x198>)
 800156e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001572:	6413      	str	r3, [r2, #64]	; 0x40
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <HAL_UART_MspInit+0x198>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001580:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_UART_MspInit+0x198>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_UART_MspInit+0x198>)
 8001586:	f043 0310 	orr.w	r3, r3, #16
 800158a:	6313      	str	r3, [r2, #48]	; 0x30
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_UART_MspInit+0x198>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001590:	f003 0310 	and.w	r3, r3, #16
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001598:	2303      	movs	r3, #3
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80015a8:	2308      	movs	r3, #8
 80015aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b0:	4619      	mov	r1, r3
 80015b2:	4809      	ldr	r0, [pc, #36]	; (80015d8 <HAL_UART_MspInit+0x1ac>)
 80015b4:	f001 fa7e 	bl	8002ab4 <HAL_GPIO_Init>
}
 80015b8:	bf00      	nop
 80015ba:	3740      	adds	r7, #64	; 0x40
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40004c00 	.word	0x40004c00
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000
 80015cc:	40005000 	.word	0x40005000
 80015d0:	40020400 	.word	0x40020400
 80015d4:	40007800 	.word	0x40007800
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40007c00 	.word	0x40007c00

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <NMI_Handler+0x4>

080015e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <MemManage_Handler+0x4>

080015f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <UsageFault_Handler+0x4>

080015fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162c:	f000 f888 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <DMA2_Stream0_IRQHandler+0x10>)
 800163a:	f000 ffd3 	bl	80025e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000170 	.word	0x20000170

08001648 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <SystemInit+0x28>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001652:	4a07      	ldr	r2, [pc, #28]	; (8001670 <SystemInit+0x28>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <SystemInit+0x28>)
 800165e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001662:	609a      	str	r2, [r3, #8]
#endif
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001678:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800167a:	e003      	b.n	8001684 <LoopCopyDataInit>

0800167c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800167e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001680:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001682:	3104      	adds	r1, #4

08001684 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001684:	480b      	ldr	r0, [pc, #44]	; (80016b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001688:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800168a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800168c:	d3f6      	bcc.n	800167c <CopyDataInit>
  ldr  r2, =_sbss
 800168e:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001690:	e002      	b.n	8001698 <LoopFillZerobss>

08001692 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001692:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001694:	f842 3b04 	str.w	r3, [r2], #4

08001698 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800169a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800169c:	d3f9      	bcc.n	8001692 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800169e:	f7ff ffd3 	bl	8001648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016a2:	f004 fb21 	bl	8005ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016a6:	f7fe ff6d 	bl	8000584 <main>
  bx  lr    
 80016aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016ac:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80016b0:	08005d88 	.word	0x08005d88
  ldr  r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016b8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80016bc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80016c0:	20000380 	.word	0x20000380

080016c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC_IRQHandler>

080016c6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ca:	2003      	movs	r0, #3
 80016cc:	f000 fe3a 	bl	8002344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d0:	2000      	movs	r0, #0
 80016d2:	f000 f805 	bl	80016e0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80016d6:	f7ff fd55 	bl	8001184 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_InitTick+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x58>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fe55 	bl	80023ae <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 fe1d 	bl	800235a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	; (800173c <HAL_InitTick+0x5c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000000 	.word	0x20000000
 8001738:	20000008 	.word	0x20000008
 800173c:	20000004 	.word	0x20000004

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000008 	.word	0x20000008
 8001764:	2000037c 	.word	0x2000037c

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	2000037c 	.word	0x2000037c

08001780 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e031      	b.n	80017fa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fd14 	bl	80011cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d116      	bne.n	80017ec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_ADC_Init+0x84>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	f043 0202 	orr.w	r2, r3, #2
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fa70 	bl	8001cb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f023 0303 	bic.w	r3, r3, #3
 80017e2:	f043 0201 	orr.w	r2, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
 80017ea:	e001      	b.n	80017f0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	ffffeefd 	.word	0xffffeefd

08001808 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_ADC_Start_DMA+0x1e>
 8001822:	2302      	movs	r3, #2
 8001824:	e0c7      	b.n	80019b6 <HAL_ADC_Start_DMA+0x1ae>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b01      	cmp	r3, #1
 800183a:	d018      	beq.n	800186e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0201 	orr.w	r2, r2, #1
 800184a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800184c:	4b5c      	ldr	r3, [pc, #368]	; (80019c0 <HAL_ADC_Start_DMA+0x1b8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a5c      	ldr	r2, [pc, #368]	; (80019c4 <HAL_ADC_Start_DMA+0x1bc>)
 8001852:	fba2 2303 	umull	r2, r3, r2, r3
 8001856:	0c9a      	lsrs	r2, r3, #18
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001860:	e002      	b.n	8001868 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3b01      	subs	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f9      	bne.n	8001862 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b01      	cmp	r3, #1
 800187a:	f040 809b 	bne.w	80019b4 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001882:	4b51      	ldr	r3, [pc, #324]	; (80019c8 <HAL_ADC_Start_DMA+0x1c0>)
 8001884:	4013      	ands	r3, r2
 8001886:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001898:	2b00      	cmp	r3, #0
 800189a:	d007      	beq.n	80018ac <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018b8:	d106      	bne.n	80018c8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f023 0206 	bic.w	r2, r3, #6
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	645a      	str	r2, [r3, #68]	; 0x44
 80018c6:	e002      	b.n	80018ce <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018da:	4a3c      	ldr	r2, [pc, #240]	; (80019cc <HAL_ADC_Start_DMA+0x1c4>)
 80018dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e2:	4a3b      	ldr	r2, [pc, #236]	; (80019d0 <HAL_ADC_Start_DMA+0x1c8>)
 80018e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ea:	4a3a      	ldr	r2, [pc, #232]	; (80019d4 <HAL_ADC_Start_DMA+0x1cc>)
 80018ec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001906:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001916:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	334c      	adds	r3, #76	; 0x4c
 8001922:	4619      	mov	r1, r3
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f000 fdfc 	bl	8002524 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800192c:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <HAL_ADC_Start_DMA+0x1d0>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 031f 	and.w	r3, r3, #31
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10f      	bne.n	8001958 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d136      	bne.n	80019b4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	e02d      	b.n	80019b4 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1f      	ldr	r2, [pc, #124]	; (80019dc <HAL_ADC_Start_DMA+0x1d4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d10e      	bne.n	8001980 <HAL_ADC_Start_DMA+0x178>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d107      	bne.n	8001980 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800197e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_ADC_Start_DMA+0x1d0>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	2b00      	cmp	r3, #0
 800198a:	d113      	bne.n	80019b4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a13      	ldr	r2, [pc, #76]	; (80019e0 <HAL_ADC_Start_DMA+0x1d8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d10e      	bne.n	80019b4 <HAL_ADC_Start_DMA+0x1ac>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d107      	bne.n	80019b4 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019b2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000000 	.word	0x20000000
 80019c4:	431bde83 	.word	0x431bde83
 80019c8:	fffff8fe 	.word	0xfffff8fe
 80019cc:	08001ea9 	.word	0x08001ea9
 80019d0:	08001f63 	.word	0x08001f63
 80019d4:	08001f7f 	.word	0x08001f7f
 80019d8:	40012300 	.word	0x40012300
 80019dc:	40012000 	.word	0x40012000
 80019e0:	40012200 	.word	0x40012200

080019e4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x1c>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e12a      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x272>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b09      	cmp	r3, #9
 8001a4a:	d93a      	bls.n	8001ac2 <HAL_ADC_ConfigChannel+0xa2>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a54:	d035      	beq.n	8001ac2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68d9      	ldr	r1, [r3, #12]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	4613      	mov	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	3b1e      	subs	r3, #30
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	400a      	ands	r2, r1
 8001a7a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a87      	ldr	r2, [pc, #540]	; (8001ca0 <HAL_ADC_ConfigChannel+0x280>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d10a      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68d9      	ldr	r1, [r3, #12]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	061a      	lsls	r2, r3, #24
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a9a:	e035      	b.n	8001b08 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68d9      	ldr	r1, [r3, #12]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4618      	mov	r0, r3
 8001aae:	4603      	mov	r3, r0
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4403      	add	r3, r0
 8001ab4:	3b1e      	subs	r3, #30
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ac0:	e022      	b.n	8001b08 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6919      	ldr	r1, [r3, #16]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	2207      	movs	r2, #7
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43da      	mvns	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6919      	ldr	r1, [r3, #16]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	4603      	mov	r3, r0
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4403      	add	r3, r0
 8001afe:	409a      	lsls	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b06      	cmp	r3, #6
 8001b0e:	d824      	bhi.n	8001b5a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	3b05      	subs	r3, #5
 8001b22:	221f      	movs	r2, #31
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43da      	mvns	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	400a      	ands	r2, r1
 8001b30:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	3b05      	subs	r3, #5
 8001b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	635a      	str	r2, [r3, #52]	; 0x34
 8001b58:	e04c      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	d824      	bhi.n	8001bac <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	3b23      	subs	r3, #35	; 0x23
 8001b74:	221f      	movs	r2, #31
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	400a      	ands	r2, r1
 8001b82:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	4618      	mov	r0, r3
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3b23      	subs	r3, #35	; 0x23
 8001b9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	631a      	str	r2, [r3, #48]	; 0x30
 8001baa:	e023      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	3b41      	subs	r3, #65	; 0x41
 8001bbe:	221f      	movs	r2, #31
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	400a      	ands	r2, r1
 8001bcc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	3b41      	subs	r3, #65	; 0x41
 8001be8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a2a      	ldr	r2, [pc, #168]	; (8001ca4 <HAL_ADC_ConfigChannel+0x284>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10a      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x1f4>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c06:	d105      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001c08:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <HAL_ADC_ConfigChannel+0x288>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4a26      	ldr	r2, [pc, #152]	; (8001ca8 <HAL_ADC_ConfigChannel+0x288>)
 8001c0e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001c12:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a22      	ldr	r2, [pc, #136]	; (8001ca4 <HAL_ADC_ConfigChannel+0x284>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d109      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x212>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b12      	cmp	r3, #18
 8001c24:	d105      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <HAL_ADC_ConfigChannel+0x288>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ca8 <HAL_ADC_ConfigChannel+0x288>)
 8001c2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c30:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <HAL_ADC_ConfigChannel+0x284>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d125      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x268>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_ADC_ConfigChannel+0x280>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d003      	beq.n	8001c4e <HAL_ADC_ConfigChannel+0x22e>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b11      	cmp	r3, #17
 8001c4c:	d11c      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001c4e:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <HAL_ADC_ConfigChannel+0x288>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4a15      	ldr	r2, [pc, #84]	; (8001ca8 <HAL_ADC_ConfigChannel+0x288>)
 8001c54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c58:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_ADC_ConfigChannel+0x280>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d111      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_ADC_ConfigChannel+0x28c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <HAL_ADC_ConfigChannel+0x290>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	0c9a      	lsrs	r2, r3, #18
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c7a:	e002      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f9      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	10000012 	.word	0x10000012
 8001ca4:	40012000 	.word	0x40012000
 8001ca8:	40012300 	.word	0x40012300
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	431bde83 	.word	0x431bde83

08001cb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001cbc:	4b78      	ldr	r3, [pc, #480]	; (8001ea0 <ADC_Init+0x1ec>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4a77      	ldr	r2, [pc, #476]	; (8001ea0 <ADC_Init+0x1ec>)
 8001cc2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001cc6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001cc8:	4b75      	ldr	r3, [pc, #468]	; (8001ea0 <ADC_Init+0x1ec>)
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4973      	ldr	r1, [pc, #460]	; (8001ea0 <ADC_Init+0x1ec>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ce4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6859      	ldr	r1, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	021a      	lsls	r2, r3, #8
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6859      	ldr	r1, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6899      	ldr	r1, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	4a58      	ldr	r2, [pc, #352]	; (8001ea4 <ADC_Init+0x1f0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d022      	beq.n	8001d8e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6899      	ldr	r1, [r3, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6899      	ldr	r1, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	e00f      	b.n	8001dae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0202 	bic.w	r2, r2, #2
 8001dbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6899      	ldr	r1, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	005a      	lsls	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01b      	beq.n	8001e14 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6859      	ldr	r1, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	3b01      	subs	r3, #1
 8001e08:	035a      	lsls	r2, r3, #13
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	e007      	b.n	8001e24 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	051a      	lsls	r2, r3, #20
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6899      	ldr	r1, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e66:	025a      	lsls	r2, r3, #9
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6899      	ldr	r1, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	029a      	lsls	r2, r3, #10
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	609a      	str	r2, [r3, #8]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	40012300 	.word	0x40012300
 8001ea4:	0f000001 	.word	0x0f000001

08001ea8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d13c      	bne.n	8001f3c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d12b      	bne.n	8001f34 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d127      	bne.n	8001f34 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d119      	bne.n	8001f34 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0220 	bic.w	r2, r2, #32
 8001f0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d105      	bne.n	8001f34 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f7ff fd55 	bl	80019e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f3a:	e00e      	b.n	8001f5a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f7ff fd5f 	bl	8001a0c <HAL_ADC_ErrorCallback>
}
 8001f4e:	e004      	b.n	8001f5a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	4798      	blx	r3
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f7ff fd41 	bl	80019f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f043 0204 	orr.w	r2, r3, #4
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f7ff fd34 	bl	8001a0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0ed      	b.n	800219a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff f98c 	bl	80012e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0202 	bic.w	r2, r2, #2
 8001fde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fe0:	f7ff fbc2 	bl	8001768 <HAL_GetTick>
 8001fe4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fe6:	e012      	b.n	800200e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fe8:	f7ff fbbe 	bl	8001768 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b0a      	cmp	r3, #10
 8001ff4:	d90b      	bls.n	800200e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2205      	movs	r2, #5
 8002006:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e0c5      	b.n	800219a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1e5      	bne.n	8001fe8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800202c:	f7ff fb9c 	bl	8001768 <HAL_GetTick>
 8002030:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002032:	e012      	b.n	800205a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002034:	f7ff fb98 	bl	8001768 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b0a      	cmp	r3, #10
 8002040:	d90b      	bls.n	800205a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2205      	movs	r2, #5
 8002052:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e09f      	b.n	800219a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0e5      	beq.n	8002034 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	7e1b      	ldrb	r3, [r3, #24]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d108      	bne.n	8002082 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	e007      	b.n	8002092 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002090:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	7e5b      	ldrb	r3, [r3, #25]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d108      	bne.n	80020ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	e007      	b.n	80020bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	7e9b      	ldrb	r3, [r3, #26]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d108      	bne.n	80020d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0220 	orr.w	r2, r2, #32
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e007      	b.n	80020e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0220 	bic.w	r2, r2, #32
 80020e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7edb      	ldrb	r3, [r3, #27]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d108      	bne.n	8002100 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0210 	bic.w	r2, r2, #16
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e007      	b.n	8002110 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0210 	orr.w	r2, r2, #16
 800210e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7f1b      	ldrb	r3, [r3, #28]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d108      	bne.n	800212a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0208 	orr.w	r2, r2, #8
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e007      	b.n	800213a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0208 	bic.w	r2, r2, #8
 8002138:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7f5b      	ldrb	r3, [r3, #29]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d108      	bne.n	8002154 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0204 	orr.w	r2, r2, #4
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e007      	b.n	8002164 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0204 	bic.w	r2, r2, #4
 8002162:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	ea42 0103 	orr.w	r1, r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	1e5a      	subs	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <__NVIC_SetPriorityGrouping+0x40>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c0:	4013      	ands	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <__NVIC_SetPriorityGrouping+0x44>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <__NVIC_SetPriorityGrouping+0x40>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60d3      	str	r3, [r2, #12]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00
 80021e8:	05fa0000 	.word	0x05fa0000

080021ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <__NVIC_GetPriorityGrouping+0x18>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	f003 0307 	and.w	r3, r3, #7
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	2b00      	cmp	r3, #0
 8002218:	db0b      	blt.n	8002232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	f003 021f 	and.w	r2, r3, #31
 8002220:	4907      	ldr	r1, [pc, #28]	; (8002240 <__NVIC_EnableIRQ+0x38>)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	2001      	movs	r0, #1
 800222a:	fa00 f202 	lsl.w	r2, r0, r2
 800222e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000e100 	.word	0xe000e100

08002244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	6039      	str	r1, [r7, #0]
 800224e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002254:	2b00      	cmp	r3, #0
 8002256:	db0a      	blt.n	800226e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	b2da      	uxtb	r2, r3
 800225c:	490c      	ldr	r1, [pc, #48]	; (8002290 <__NVIC_SetPriority+0x4c>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	0112      	lsls	r2, r2, #4
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	440b      	add	r3, r1
 8002268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800226c:	e00a      	b.n	8002284 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4908      	ldr	r1, [pc, #32]	; (8002294 <__NVIC_SetPriority+0x50>)
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	3b04      	subs	r3, #4
 800227c:	0112      	lsls	r2, r2, #4
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	440b      	add	r3, r1
 8002282:	761a      	strb	r2, [r3, #24]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000e100 	.word	0xe000e100
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f1c3 0307 	rsb	r3, r3, #7
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	bf28      	it	cs
 80022b6:	2304      	movcs	r3, #4
 80022b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3304      	adds	r3, #4
 80022be:	2b06      	cmp	r3, #6
 80022c0:	d902      	bls.n	80022c8 <NVIC_EncodePriority+0x30>
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3b03      	subs	r3, #3
 80022c6:	e000      	b.n	80022ca <NVIC_EncodePriority+0x32>
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	f04f 32ff 	mov.w	r2, #4294967295
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	401a      	ands	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e0:	f04f 31ff 	mov.w	r1, #4294967295
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ea:	43d9      	mvns	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	4313      	orrs	r3, r2
         );
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3724      	adds	r7, #36	; 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002310:	d301      	bcc.n	8002316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002312:	2301      	movs	r3, #1
 8002314:	e00f      	b.n	8002336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002316:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <SysTick_Config+0x40>)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3b01      	subs	r3, #1
 800231c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231e:	210f      	movs	r1, #15
 8002320:	f04f 30ff 	mov.w	r0, #4294967295
 8002324:	f7ff ff8e 	bl	8002244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <SysTick_Config+0x40>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232e:	4b04      	ldr	r3, [pc, #16]	; (8002340 <SysTick_Config+0x40>)
 8002330:	2207      	movs	r2, #7
 8002332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	e000e010 	.word	0xe000e010

08002344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ff29 	bl	80021a4 <__NVIC_SetPriorityGrouping>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800235a:	b580      	push	{r7, lr}
 800235c:	b086      	sub	sp, #24
 800235e:	af00      	add	r7, sp, #0
 8002360:	4603      	mov	r3, r0
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800236c:	f7ff ff3e 	bl	80021ec <__NVIC_GetPriorityGrouping>
 8002370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	6978      	ldr	r0, [r7, #20]
 8002378:	f7ff ff8e 	bl	8002298 <NVIC_EncodePriority>
 800237c:	4602      	mov	r2, r0
 800237e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff5d 	bl	8002244 <__NVIC_SetPriority>
}
 800238a:	bf00      	nop
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	4603      	mov	r3, r0
 800239a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800239c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff31 	bl	8002208 <__NVIC_EnableIRQ>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff ffa2 	bl	8002300 <SysTick_Config>
 80023bc:	4603      	mov	r3, r0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023d4:	f7ff f9c8 	bl	8001768 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e099      	b.n	8002518 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002404:	e00f      	b.n	8002426 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002406:	f7ff f9af 	bl	8001768 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b05      	cmp	r3, #5
 8002412:	d908      	bls.n	8002426 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2220      	movs	r2, #32
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2203      	movs	r2, #3
 800241e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e078      	b.n	8002518 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1e8      	bne.n	8002406 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	4b38      	ldr	r3, [pc, #224]	; (8002520 <HAL_DMA_Init+0x158>)
 8002440:	4013      	ands	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002452:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800245e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800246a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	2b04      	cmp	r3, #4
 800247e:	d107      	bne.n	8002490 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	4313      	orrs	r3, r2
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4313      	orrs	r3, r2
 800248e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f023 0307 	bic.w	r3, r3, #7
 80024a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d117      	bne.n	80024ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00e      	beq.n	80024ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fa77 	bl	80029c0 <DMA_CheckFifoParam>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2240      	movs	r2, #64	; 0x40
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024e6:	2301      	movs	r3, #1
 80024e8:	e016      	b.n	8002518 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fa2e 	bl	8002954 <DMA_CalcBaseAndBitshift>
 80024f8:	4603      	mov	r3, r0
 80024fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	223f      	movs	r2, #63	; 0x3f
 8002502:	409a      	lsls	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	e010803f 	.word	0xe010803f

08002524 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_DMA_Start_IT+0x26>
 8002546:	2302      	movs	r3, #2
 8002548:	e048      	b.n	80025dc <HAL_DMA_Start_IT+0xb8>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d137      	bne.n	80025ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2202      	movs	r2, #2
 8002562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f9c0 	bl	80028f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257c:	223f      	movs	r2, #63	; 0x3f
 800257e:	409a      	lsls	r2, r3
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0216 	orr.w	r2, r2, #22
 8002592:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025a2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d007      	beq.n	80025bc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0208 	orr.w	r2, r2, #8
 80025ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	e005      	b.n	80025da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025d6:	2302      	movs	r3, #2
 80025d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025da:	7dfb      	ldrb	r3, [r7, #23]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80025f0:	4b92      	ldr	r3, [pc, #584]	; (800283c <HAL_DMA_IRQHandler+0x258>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a92      	ldr	r2, [pc, #584]	; (8002840 <HAL_DMA_IRQHandler+0x25c>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	0a9b      	lsrs	r3, r3, #10
 80025fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260e:	2208      	movs	r2, #8
 8002610:	409a      	lsls	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d01a      	beq.n	8002650 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d013      	beq.n	8002650 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0204 	bic.w	r2, r2, #4
 8002636:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	2208      	movs	r2, #8
 800263e:	409a      	lsls	r2, r3
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002648:	f043 0201 	orr.w	r2, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	2201      	movs	r2, #1
 8002656:	409a      	lsls	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d012      	beq.n	8002686 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	2201      	movs	r2, #1
 8002674:	409a      	lsls	r2, r3
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	f043 0202 	orr.w	r2, r3, #2
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	2204      	movs	r2, #4
 800268c:	409a      	lsls	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d012      	beq.n	80026bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00b      	beq.n	80026bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a8:	2204      	movs	r2, #4
 80026aa:	409a      	lsls	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	f043 0204 	orr.w	r2, r3, #4
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c0:	2210      	movs	r2, #16
 80026c2:	409a      	lsls	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d043      	beq.n	8002754 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d03c      	beq.n	8002754 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026de:	2210      	movs	r2, #16
 80026e0:	409a      	lsls	r2, r3
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d018      	beq.n	8002726 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d108      	bne.n	8002714 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	2b00      	cmp	r3, #0
 8002708:	d024      	beq.n	8002754 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	4798      	blx	r3
 8002712:	e01f      	b.n	8002754 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002718:	2b00      	cmp	r3, #0
 800271a:	d01b      	beq.n	8002754 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
 8002724:	e016      	b.n	8002754 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d107      	bne.n	8002744 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0208 	bic.w	r2, r2, #8
 8002742:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	2220      	movs	r2, #32
 800275a:	409a      	lsls	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 808e 	beq.w	8002882 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 8086 	beq.w	8002882 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277a:	2220      	movs	r2, #32
 800277c:	409a      	lsls	r2, r3
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b05      	cmp	r3, #5
 800278c:	d136      	bne.n	80027fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0216 	bic.w	r2, r2, #22
 800279c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d103      	bne.n	80027be <HAL_DMA_IRQHandler+0x1da>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d007      	beq.n	80027ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0208 	bic.w	r2, r2, #8
 80027cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d2:	223f      	movs	r2, #63	; 0x3f
 80027d4:	409a      	lsls	r2, r3
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d07d      	beq.n	80028ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
        }
        return;
 80027fa:	e078      	b.n	80028ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d01c      	beq.n	8002844 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d108      	bne.n	800282a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281c:	2b00      	cmp	r3, #0
 800281e:	d030      	beq.n	8002882 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	4798      	blx	r3
 8002828:	e02b      	b.n	8002882 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d027      	beq.n	8002882 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4798      	blx	r3
 800283a:	e022      	b.n	8002882 <HAL_DMA_IRQHandler+0x29e>
 800283c:	20000000 	.word	0x20000000
 8002840:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10f      	bne.n	8002872 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0210 	bic.w	r2, r2, #16
 8002860:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002886:	2b00      	cmp	r3, #0
 8002888:	d032      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d022      	beq.n	80028dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2205      	movs	r2, #5
 800289a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0201 	bic.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	3301      	adds	r3, #1
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d307      	bcc.n	80028ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f2      	bne.n	80028ae <HAL_DMA_IRQHandler+0x2ca>
 80028c8:	e000      	b.n	80028cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80028ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
 80028ec:	e000      	b.n	80028f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80028ee:	bf00      	nop
    }
  }
}
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop

080028f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002914:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b40      	cmp	r3, #64	; 0x40
 8002924:	d108      	bne.n	8002938 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002936:	e007      	b.n	8002948 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	60da      	str	r2, [r3, #12]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	3b10      	subs	r3, #16
 8002964:	4a13      	ldr	r2, [pc, #76]	; (80029b4 <DMA_CalcBaseAndBitshift+0x60>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800296e:	4a12      	ldr	r2, [pc, #72]	; (80029b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4413      	add	r3, r2
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d908      	bls.n	8002994 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <DMA_CalcBaseAndBitshift+0x68>)
 800298a:	4013      	ands	r3, r2
 800298c:	1d1a      	adds	r2, r3, #4
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	659a      	str	r2, [r3, #88]	; 0x58
 8002992:	e006      	b.n	80029a2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <DMA_CalcBaseAndBitshift+0x68>)
 800299c:	4013      	ands	r3, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	aaaaaaab 	.word	0xaaaaaaab
 80029b8:	08005d70 	.word	0x08005d70
 80029bc:	fffffc00 	.word	0xfffffc00

080029c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d11f      	bne.n	8002a1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d855      	bhi.n	8002a8c <DMA_CheckFifoParam+0xcc>
 80029e0:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <DMA_CheckFifoParam+0x28>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	080029f9 	.word	0x080029f9
 80029ec:	08002a0b 	.word	0x08002a0b
 80029f0:	080029f9 	.word	0x080029f9
 80029f4:	08002a8d 	.word	0x08002a8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d045      	beq.n	8002a90 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a08:	e042      	b.n	8002a90 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a12:	d13f      	bne.n	8002a94 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a18:	e03c      	b.n	8002a94 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a22:	d121      	bne.n	8002a68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d836      	bhi.n	8002a98 <DMA_CheckFifoParam+0xd8>
 8002a2a:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <DMA_CheckFifoParam+0x70>)
 8002a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a30:	08002a41 	.word	0x08002a41
 8002a34:	08002a47 	.word	0x08002a47
 8002a38:	08002a41 	.word	0x08002a41
 8002a3c:	08002a59 	.word	0x08002a59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
      break;
 8002a44:	e02f      	b.n	8002aa6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d024      	beq.n	8002a9c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a56:	e021      	b.n	8002a9c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a60:	d11e      	bne.n	8002aa0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a66:	e01b      	b.n	8002aa0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d902      	bls.n	8002a74 <DMA_CheckFifoParam+0xb4>
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d003      	beq.n	8002a7a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a72:	e018      	b.n	8002aa6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
      break;
 8002a78:	e015      	b.n	8002aa6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00e      	beq.n	8002aa4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
      break;
 8002a8a:	e00b      	b.n	8002aa4 <DMA_CheckFifoParam+0xe4>
      break;
 8002a8c:	bf00      	nop
 8002a8e:	e00a      	b.n	8002aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8002a90:	bf00      	nop
 8002a92:	e008      	b.n	8002aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8002a94:	bf00      	nop
 8002a96:	e006      	b.n	8002aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8002a98:	bf00      	nop
 8002a9a:	e004      	b.n	8002aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8002a9c:	bf00      	nop
 8002a9e:	e002      	b.n	8002aa6 <DMA_CheckFifoParam+0xe6>
      break;   
 8002aa0:	bf00      	nop
 8002aa2:	e000      	b.n	8002aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8002aa4:	bf00      	nop
    }
  } 
  
  return status; 
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b089      	sub	sp, #36	; 0x24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	e175      	b.n	8002dc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	f040 8164 	bne.w	8002dba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d00b      	beq.n	8002b12 <HAL_GPIO_Init+0x5e>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d007      	beq.n	8002b12 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b06:	2b11      	cmp	r3, #17
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b12      	cmp	r3, #18
 8002b10:	d130      	bne.n	8002b74 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b48:	2201      	movs	r2, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 0201 	and.w	r2, r3, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	2203      	movs	r2, #3
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d003      	beq.n	8002bb4 <HAL_GPIO_Init+0x100>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b12      	cmp	r3, #18
 8002bb2:	d123      	bne.n	8002bfc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	08da      	lsrs	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3208      	adds	r2, #8
 8002bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	220f      	movs	r2, #15
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	08da      	lsrs	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3208      	adds	r2, #8
 8002bf6:	69b9      	ldr	r1, [r7, #24]
 8002bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	2203      	movs	r2, #3
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0203 	and.w	r2, r3, #3
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80be 	beq.w	8002dba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3e:	4b65      	ldr	r3, [pc, #404]	; (8002dd4 <HAL_GPIO_Init+0x320>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	4a64      	ldr	r2, [pc, #400]	; (8002dd4 <HAL_GPIO_Init+0x320>)
 8002c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c48:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4a:	4b62      	ldr	r3, [pc, #392]	; (8002dd4 <HAL_GPIO_Init+0x320>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c56:	4a60      	ldr	r2, [pc, #384]	; (8002dd8 <HAL_GPIO_Init+0x324>)
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	089b      	lsrs	r3, r3, #2
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	220f      	movs	r2, #15
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a57      	ldr	r2, [pc, #348]	; (8002ddc <HAL_GPIO_Init+0x328>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d037      	beq.n	8002cf2 <HAL_GPIO_Init+0x23e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a56      	ldr	r2, [pc, #344]	; (8002de0 <HAL_GPIO_Init+0x32c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d031      	beq.n	8002cee <HAL_GPIO_Init+0x23a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a55      	ldr	r2, [pc, #340]	; (8002de4 <HAL_GPIO_Init+0x330>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d02b      	beq.n	8002cea <HAL_GPIO_Init+0x236>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a54      	ldr	r2, [pc, #336]	; (8002de8 <HAL_GPIO_Init+0x334>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d025      	beq.n	8002ce6 <HAL_GPIO_Init+0x232>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a53      	ldr	r2, [pc, #332]	; (8002dec <HAL_GPIO_Init+0x338>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01f      	beq.n	8002ce2 <HAL_GPIO_Init+0x22e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a52      	ldr	r2, [pc, #328]	; (8002df0 <HAL_GPIO_Init+0x33c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d019      	beq.n	8002cde <HAL_GPIO_Init+0x22a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a51      	ldr	r2, [pc, #324]	; (8002df4 <HAL_GPIO_Init+0x340>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_GPIO_Init+0x226>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a50      	ldr	r2, [pc, #320]	; (8002df8 <HAL_GPIO_Init+0x344>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00d      	beq.n	8002cd6 <HAL_GPIO_Init+0x222>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4f      	ldr	r2, [pc, #316]	; (8002dfc <HAL_GPIO_Init+0x348>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <HAL_GPIO_Init+0x21e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4e      	ldr	r2, [pc, #312]	; (8002e00 <HAL_GPIO_Init+0x34c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_GPIO_Init+0x21a>
 8002cca:	2309      	movs	r3, #9
 8002ccc:	e012      	b.n	8002cf4 <HAL_GPIO_Init+0x240>
 8002cce:	230a      	movs	r3, #10
 8002cd0:	e010      	b.n	8002cf4 <HAL_GPIO_Init+0x240>
 8002cd2:	2308      	movs	r3, #8
 8002cd4:	e00e      	b.n	8002cf4 <HAL_GPIO_Init+0x240>
 8002cd6:	2307      	movs	r3, #7
 8002cd8:	e00c      	b.n	8002cf4 <HAL_GPIO_Init+0x240>
 8002cda:	2306      	movs	r3, #6
 8002cdc:	e00a      	b.n	8002cf4 <HAL_GPIO_Init+0x240>
 8002cde:	2305      	movs	r3, #5
 8002ce0:	e008      	b.n	8002cf4 <HAL_GPIO_Init+0x240>
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_Init+0x240>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e004      	b.n	8002cf4 <HAL_GPIO_Init+0x240>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e002      	b.n	8002cf4 <HAL_GPIO_Init+0x240>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_GPIO_Init+0x240>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	f002 0203 	and.w	r2, r2, #3
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	4093      	lsls	r3, r2
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d04:	4934      	ldr	r1, [pc, #208]	; (8002dd8 <HAL_GPIO_Init+0x324>)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d12:	4b3c      	ldr	r3, [pc, #240]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d36:	4a33      	ldr	r2, [pc, #204]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d3c:	4b31      	ldr	r3, [pc, #196]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d60:	4a28      	ldr	r2, [pc, #160]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d66:	4b27      	ldr	r3, [pc, #156]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d8a:	4a1e      	ldr	r2, [pc, #120]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d90:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db4:	4a13      	ldr	r2, [pc, #76]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b0f      	cmp	r3, #15
 8002dc4:	f67f ae86 	bls.w	8002ad4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002dc8:	bf00      	nop
 8002dca:	3724      	adds	r7, #36	; 0x24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40013800 	.word	0x40013800
 8002ddc:	40020000 	.word	0x40020000
 8002de0:	40020400 	.word	0x40020400
 8002de4:	40020800 	.word	0x40020800
 8002de8:	40020c00 	.word	0x40020c00
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40021400 	.word	0x40021400
 8002df4:	40021800 	.word	0x40021800
 8002df8:	40021c00 	.word	0x40021c00
 8002dfc:	40022000 	.word	0x40022000
 8002e00:	40022400 	.word	0x40022400
 8002e04:	40013c00 	.word	0x40013c00

08002e08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	887b      	ldrh	r3, [r7, #2]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e001      	b.n	8002e2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	807b      	strh	r3, [r7, #2]
 8002e44:	4613      	mov	r3, r2
 8002e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e48:	787b      	ldrb	r3, [r7, #1]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e54:	e003      	b.n	8002e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e56:	887b      	ldrh	r3, [r7, #2]
 8002e58:	041a      	lsls	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	619a      	str	r2, [r3, #24]
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	4b23      	ldr	r3, [pc, #140]	; (8002f04 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	4a22      	ldr	r2, [pc, #136]	; (8002f04 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e80:	6413      	str	r3, [r2, #64]	; 0x40
 8002e82:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e8e:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e98:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e9a:	f7fe fc65 	bl	8001768 <HAL_GetTick>
 8002e9e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ea0:	e009      	b.n	8002eb6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ea2:	f7fe fc61 	bl	8001768 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eb0:	d901      	bls.n	8002eb6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e022      	b.n	8002efc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002eb6:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec2:	d1ee      	bne.n	8002ea2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ec4:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0f      	ldr	r2, [pc, #60]	; (8002f08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ece:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ed0:	f7fe fc4a 	bl	8001768 <HAL_GetTick>
 8002ed4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ed6:	e009      	b.n	8002eec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ed8:	f7fe fc46 	bl	8001768 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ee6:	d901      	bls.n	8002eec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e007      	b.n	8002efc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ef8:	d1ee      	bne.n	8002ed8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40007000 	.word	0x40007000

08002f0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f14:	2300      	movs	r3, #0
 8002f16:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e29b      	b.n	800345a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8087 	beq.w	800303e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f30:	4b96      	ldr	r3, [pc, #600]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d00c      	beq.n	8002f56 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f3c:	4b93      	ldr	r3, [pc, #588]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d112      	bne.n	8002f6e <HAL_RCC_OscConfig+0x62>
 8002f48:	4b90      	ldr	r3, [pc, #576]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f54:	d10b      	bne.n	8002f6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f56:	4b8d      	ldr	r3, [pc, #564]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d06c      	beq.n	800303c <HAL_RCC_OscConfig+0x130>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d168      	bne.n	800303c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e275      	b.n	800345a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f76:	d106      	bne.n	8002f86 <HAL_RCC_OscConfig+0x7a>
 8002f78:	4b84      	ldr	r3, [pc, #528]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a83      	ldr	r2, [pc, #524]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8002f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	e02e      	b.n	8002fe4 <HAL_RCC_OscConfig+0xd8>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x9c>
 8002f8e:	4b7f      	ldr	r3, [pc, #508]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a7e      	ldr	r2, [pc, #504]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8002f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	4b7c      	ldr	r3, [pc, #496]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a7b      	ldr	r2, [pc, #492]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8002fa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	e01d      	b.n	8002fe4 <HAL_RCC_OscConfig+0xd8>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCC_OscConfig+0xc0>
 8002fb2:	4b76      	ldr	r3, [pc, #472]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a75      	ldr	r2, [pc, #468]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8002fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	4b73      	ldr	r3, [pc, #460]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a72      	ldr	r2, [pc, #456]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e00b      	b.n	8002fe4 <HAL_RCC_OscConfig+0xd8>
 8002fcc:	4b6f      	ldr	r3, [pc, #444]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a6e      	ldr	r2, [pc, #440]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8002fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4b6c      	ldr	r3, [pc, #432]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a6b      	ldr	r2, [pc, #428]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8002fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d013      	beq.n	8003014 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fe fbbc 	bl	8001768 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff4:	f7fe fbb8 	bl	8001768 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	; 0x64
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e229      	b.n	800345a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	4b61      	ldr	r3, [pc, #388]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0xe8>
 8003012:	e014      	b.n	800303e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fe fba8 	bl	8001768 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800301c:	f7fe fba4 	bl	8001768 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	; 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e215      	b.n	800345a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302e:	4b57      	ldr	r3, [pc, #348]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x110>
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d069      	beq.n	800311e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800304a:	4b50      	ldr	r3, [pc, #320]	; (800318c <HAL_RCC_OscConfig+0x280>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003056:	4b4d      	ldr	r3, [pc, #308]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b08      	cmp	r3, #8
 8003060:	d11c      	bne.n	800309c <HAL_RCC_OscConfig+0x190>
 8003062:	4b4a      	ldr	r3, [pc, #296]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d116      	bne.n	800309c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306e:	4b47      	ldr	r3, [pc, #284]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_RCC_OscConfig+0x17a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d001      	beq.n	8003086 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e1e9      	b.n	800345a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003086:	4b41      	ldr	r3, [pc, #260]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	493d      	ldr	r1, [pc, #244]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309a:	e040      	b.n	800311e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d023      	beq.n	80030ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a4:	4b39      	ldr	r3, [pc, #228]	; (800318c <HAL_RCC_OscConfig+0x280>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a38      	ldr	r2, [pc, #224]	; (800318c <HAL_RCC_OscConfig+0x280>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fe fb5a 	bl	8001768 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b8:	f7fe fb56 	bl	8001768 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e1c7      	b.n	800345a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ca:	4b30      	ldr	r3, [pc, #192]	; (800318c <HAL_RCC_OscConfig+0x280>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d6:	4b2d      	ldr	r3, [pc, #180]	; (800318c <HAL_RCC_OscConfig+0x280>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4929      	ldr	r1, [pc, #164]	; (800318c <HAL_RCC_OscConfig+0x280>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]
 80030ea:	e018      	b.n	800311e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ec:	4b27      	ldr	r3, [pc, #156]	; (800318c <HAL_RCC_OscConfig+0x280>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a26      	ldr	r2, [pc, #152]	; (800318c <HAL_RCC_OscConfig+0x280>)
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fe fb36 	bl	8001768 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003100:	f7fe fb32 	bl	8001768 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e1a3      	b.n	800345a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003112:	4b1e      	ldr	r3, [pc, #120]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d038      	beq.n	800319c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d019      	beq.n	8003166 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003132:	4b16      	ldr	r3, [pc, #88]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8003134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003136:	4a15      	ldr	r2, [pc, #84]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313e:	f7fe fb13 	bl	8001768 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003146:	f7fe fb0f 	bl	8001768 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e180      	b.n	800345a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_RCC_OscConfig+0x280>)
 800315a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x23a>
 8003164:	e01a      	b.n	800319c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003166:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCC_OscConfig+0x280>)
 8003168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316a:	4a08      	ldr	r2, [pc, #32]	; (800318c <HAL_RCC_OscConfig+0x280>)
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003172:	f7fe faf9 	bl	8001768 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003178:	e00a      	b.n	8003190 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800317a:	f7fe faf5 	bl	8001768 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d903      	bls.n	8003190 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e166      	b.n	800345a <HAL_RCC_OscConfig+0x54e>
 800318c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003190:	4b92      	ldr	r3, [pc, #584]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 8003192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1ee      	bne.n	800317a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80a4 	beq.w	80032f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031aa:	4b8c      	ldr	r3, [pc, #560]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10d      	bne.n	80031d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b6:	4b89      	ldr	r3, [pc, #548]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	4a88      	ldr	r2, [pc, #544]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 80031bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c0:	6413      	str	r3, [r2, #64]	; 0x40
 80031c2:	4b86      	ldr	r3, [pc, #536]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d2:	4b83      	ldr	r3, [pc, #524]	; (80033e0 <HAL_RCC_OscConfig+0x4d4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d118      	bne.n	8003210 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80031de:	4b80      	ldr	r3, [pc, #512]	; (80033e0 <HAL_RCC_OscConfig+0x4d4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a7f      	ldr	r2, [pc, #508]	; (80033e0 <HAL_RCC_OscConfig+0x4d4>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ea:	f7fe fabd 	bl	8001768 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f2:	f7fe fab9 	bl	8001768 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b64      	cmp	r3, #100	; 0x64
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e12a      	b.n	800345a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003204:	4b76      	ldr	r3, [pc, #472]	; (80033e0 <HAL_RCC_OscConfig+0x4d4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d106      	bne.n	8003226 <HAL_RCC_OscConfig+0x31a>
 8003218:	4b70      	ldr	r3, [pc, #448]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	4a6f      	ldr	r2, [pc, #444]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6713      	str	r3, [r2, #112]	; 0x70
 8003224:	e02d      	b.n	8003282 <HAL_RCC_OscConfig+0x376>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0x33c>
 800322e:	4b6b      	ldr	r3, [pc, #428]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	4a6a      	ldr	r2, [pc, #424]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 8003234:	f023 0301 	bic.w	r3, r3, #1
 8003238:	6713      	str	r3, [r2, #112]	; 0x70
 800323a:	4b68      	ldr	r3, [pc, #416]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	4a67      	ldr	r2, [pc, #412]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 8003240:	f023 0304 	bic.w	r3, r3, #4
 8003244:	6713      	str	r3, [r2, #112]	; 0x70
 8003246:	e01c      	b.n	8003282 <HAL_RCC_OscConfig+0x376>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b05      	cmp	r3, #5
 800324e:	d10c      	bne.n	800326a <HAL_RCC_OscConfig+0x35e>
 8003250:	4b62      	ldr	r3, [pc, #392]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	4a61      	ldr	r2, [pc, #388]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	6713      	str	r3, [r2, #112]	; 0x70
 800325c:	4b5f      	ldr	r3, [pc, #380]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	4a5e      	ldr	r2, [pc, #376]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6713      	str	r3, [r2, #112]	; 0x70
 8003268:	e00b      	b.n	8003282 <HAL_RCC_OscConfig+0x376>
 800326a:	4b5c      	ldr	r3, [pc, #368]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	4a5b      	ldr	r2, [pc, #364]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	6713      	str	r3, [r2, #112]	; 0x70
 8003276:	4b59      	ldr	r3, [pc, #356]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	4a58      	ldr	r2, [pc, #352]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 800327c:	f023 0304 	bic.w	r3, r3, #4
 8003280:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d015      	beq.n	80032b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328a:	f7fe fa6d 	bl	8001768 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003292:	f7fe fa69 	bl	8001768 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e0d8      	b.n	800345a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a8:	4b4c      	ldr	r3, [pc, #304]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ee      	beq.n	8003292 <HAL_RCC_OscConfig+0x386>
 80032b4:	e014      	b.n	80032e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b6:	f7fe fa57 	bl	8001768 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fe fa53 	bl	8001768 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e0c2      	b.n	800345a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d4:	4b41      	ldr	r3, [pc, #260]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ee      	bne.n	80032be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d105      	bne.n	80032f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e6:	4b3d      	ldr	r3, [pc, #244]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4a3c      	ldr	r2, [pc, #240]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 80032ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 80ae 	beq.w	8003458 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032fc:	4b37      	ldr	r3, [pc, #220]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b08      	cmp	r3, #8
 8003306:	d06d      	beq.n	80033e4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d14b      	bne.n	80033a8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003310:	4b32      	ldr	r3, [pc, #200]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a31      	ldr	r2, [pc, #196]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 8003316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800331a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe fa24 	bl	8001768 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003324:	f7fe fa20 	bl	8001768 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e091      	b.n	800345a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003336:	4b29      	ldr	r3, [pc, #164]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69da      	ldr	r2, [r3, #28]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	019b      	lsls	r3, r3, #6
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	085b      	lsrs	r3, r3, #1
 800335a:	3b01      	subs	r3, #1
 800335c:	041b      	lsls	r3, r3, #16
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	061b      	lsls	r3, r3, #24
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	071b      	lsls	r3, r3, #28
 800336e:	491b      	ldr	r1, [pc, #108]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 8003370:	4313      	orrs	r3, r2
 8003372:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003374:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a18      	ldr	r2, [pc, #96]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 800337a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fe f9f2 	bl	8001768 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe f9ee 	bl	8001768 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e05f      	b.n	800345a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800339a:	4b10      	ldr	r3, [pc, #64]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x47c>
 80033a6:	e057      	b.n	8003458 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0b      	ldr	r2, [pc, #44]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 80033ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe f9d8 	bl	8001768 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033bc:	f7fe f9d4 	bl	8001768 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e045      	b.n	800345a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ce:	4b03      	ldr	r3, [pc, #12]	; (80033dc <HAL_RCC_OscConfig+0x4d0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x4b0>
 80033da:	e03d      	b.n	8003458 <HAL_RCC_OscConfig+0x54c>
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80033e4:	4b1f      	ldr	r3, [pc, #124]	; (8003464 <HAL_RCC_OscConfig+0x558>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d030      	beq.n	8003454 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d129      	bne.n	8003454 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340a:	429a      	cmp	r2, r3
 800340c:	d122      	bne.n	8003454 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003414:	4013      	ands	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800341a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800341c:	4293      	cmp	r3, r2
 800341e:	d119      	bne.n	8003454 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	3b01      	subs	r3, #1
 800342e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003430:	429a      	cmp	r2, r3
 8003432:	d10f      	bne.n	8003454 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d107      	bne.n	8003454 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800

08003468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0d0      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003480:	4b6a      	ldr	r3, [pc, #424]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d910      	bls.n	80034b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b67      	ldr	r3, [pc, #412]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 020f 	bic.w	r2, r3, #15
 8003496:	4965      	ldr	r1, [pc, #404]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b63      	ldr	r3, [pc, #396]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0b8      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c8:	4b59      	ldr	r3, [pc, #356]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a58      	ldr	r2, [pc, #352]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80034ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e0:	4b53      	ldr	r3, [pc, #332]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a52      	ldr	r2, [pc, #328]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80034e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ec:	4b50      	ldr	r3, [pc, #320]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	494d      	ldr	r1, [pc, #308]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d040      	beq.n	800358c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	4b47      	ldr	r3, [pc, #284]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d115      	bne.n	800354a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e07f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352a:	4b41      	ldr	r3, [pc, #260]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e073      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353a:	4b3d      	ldr	r3, [pc, #244]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e06b      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800354a:	4b39      	ldr	r3, [pc, #228]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f023 0203 	bic.w	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4936      	ldr	r1, [pc, #216]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 8003558:	4313      	orrs	r3, r2
 800355a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800355c:	f7fe f904 	bl	8001768 <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	e00a      	b.n	800357a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003564:	f7fe f900 	bl	8001768 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e053      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	4b2d      	ldr	r3, [pc, #180]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 020c 	and.w	r2, r3, #12
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	429a      	cmp	r2, r3
 800358a:	d1eb      	bne.n	8003564 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800358c:	4b27      	ldr	r3, [pc, #156]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d210      	bcs.n	80035bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b24      	ldr	r3, [pc, #144]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 020f 	bic.w	r2, r3, #15
 80035a2:	4922      	ldr	r1, [pc, #136]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e032      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c8:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4916      	ldr	r1, [pc, #88]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035e6:	4b12      	ldr	r3, [pc, #72]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	490e      	ldr	r1, [pc, #56]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035fa:	f000 f821 	bl	8003640 <HAL_RCC_GetSysClockFreq>
 80035fe:	4601      	mov	r1, r0
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <HAL_RCC_ClockConfig+0x1cc>)
 800360c:	5cd3      	ldrb	r3, [r2, r3]
 800360e:	fa21 f303 	lsr.w	r3, r1, r3
 8003612:	4a09      	ldr	r2, [pc, #36]	; (8003638 <HAL_RCC_ClockConfig+0x1d0>)
 8003614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_RCC_ClockConfig+0x1d4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe f860 	bl	80016e0 <HAL_InitTick>

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023c00 	.word	0x40023c00
 8003630:	40023800 	.word	0x40023800
 8003634:	08005d58 	.word	0x08005d58
 8003638:	20000000 	.word	0x20000000
 800363c:	20000004 	.word	0x20000004

08003640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	607b      	str	r3, [r7, #4]
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	2300      	movs	r3, #0
 8003650:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003656:	4b63      	ldr	r3, [pc, #396]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b04      	cmp	r3, #4
 8003660:	d007      	beq.n	8003672 <HAL_RCC_GetSysClockFreq+0x32>
 8003662:	2b08      	cmp	r3, #8
 8003664:	d008      	beq.n	8003678 <HAL_RCC_GetSysClockFreq+0x38>
 8003666:	2b00      	cmp	r3, #0
 8003668:	f040 80b4 	bne.w	80037d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800366c:	4b5e      	ldr	r3, [pc, #376]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800366e:	60bb      	str	r3, [r7, #8]
      break;
 8003670:	e0b3      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003672:	4b5e      	ldr	r3, [pc, #376]	; (80037ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003674:	60bb      	str	r3, [r7, #8]
      break;
 8003676:	e0b0      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003678:	4b5a      	ldr	r3, [pc, #360]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003680:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003682:	4b58      	ldr	r3, [pc, #352]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d04a      	beq.n	8003724 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368e:	4b55      	ldr	r3, [pc, #340]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	099b      	lsrs	r3, r3, #6
 8003694:	f04f 0400 	mov.w	r4, #0
 8003698:	f240 11ff 	movw	r1, #511	; 0x1ff
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	ea03 0501 	and.w	r5, r3, r1
 80036a4:	ea04 0602 	and.w	r6, r4, r2
 80036a8:	4629      	mov	r1, r5
 80036aa:	4632      	mov	r2, r6
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	f04f 0400 	mov.w	r4, #0
 80036b4:	0154      	lsls	r4, r2, #5
 80036b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036ba:	014b      	lsls	r3, r1, #5
 80036bc:	4619      	mov	r1, r3
 80036be:	4622      	mov	r2, r4
 80036c0:	1b49      	subs	r1, r1, r5
 80036c2:	eb62 0206 	sbc.w	r2, r2, r6
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	f04f 0400 	mov.w	r4, #0
 80036ce:	0194      	lsls	r4, r2, #6
 80036d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036d4:	018b      	lsls	r3, r1, #6
 80036d6:	1a5b      	subs	r3, r3, r1
 80036d8:	eb64 0402 	sbc.w	r4, r4, r2
 80036dc:	f04f 0100 	mov.w	r1, #0
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	00e2      	lsls	r2, r4, #3
 80036e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036ea:	00d9      	lsls	r1, r3, #3
 80036ec:	460b      	mov	r3, r1
 80036ee:	4614      	mov	r4, r2
 80036f0:	195b      	adds	r3, r3, r5
 80036f2:	eb44 0406 	adc.w	r4, r4, r6
 80036f6:	f04f 0100 	mov.w	r1, #0
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	0262      	lsls	r2, r4, #9
 8003700:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003704:	0259      	lsls	r1, r3, #9
 8003706:	460b      	mov	r3, r1
 8003708:	4614      	mov	r4, r2
 800370a:	4618      	mov	r0, r3
 800370c:	4621      	mov	r1, r4
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f04f 0400 	mov.w	r4, #0
 8003714:	461a      	mov	r2, r3
 8003716:	4623      	mov	r3, r4
 8003718:	f7fc fd8e 	bl	8000238 <__aeabi_uldivmod>
 800371c:	4603      	mov	r3, r0
 800371e:	460c      	mov	r4, r1
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	e049      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003724:	4b2f      	ldr	r3, [pc, #188]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	099b      	lsrs	r3, r3, #6
 800372a:	f04f 0400 	mov.w	r4, #0
 800372e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	ea03 0501 	and.w	r5, r3, r1
 800373a:	ea04 0602 	and.w	r6, r4, r2
 800373e:	4629      	mov	r1, r5
 8003740:	4632      	mov	r2, r6
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	f04f 0400 	mov.w	r4, #0
 800374a:	0154      	lsls	r4, r2, #5
 800374c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003750:	014b      	lsls	r3, r1, #5
 8003752:	4619      	mov	r1, r3
 8003754:	4622      	mov	r2, r4
 8003756:	1b49      	subs	r1, r1, r5
 8003758:	eb62 0206 	sbc.w	r2, r2, r6
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	f04f 0400 	mov.w	r4, #0
 8003764:	0194      	lsls	r4, r2, #6
 8003766:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800376a:	018b      	lsls	r3, r1, #6
 800376c:	1a5b      	subs	r3, r3, r1
 800376e:	eb64 0402 	sbc.w	r4, r4, r2
 8003772:	f04f 0100 	mov.w	r1, #0
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	00e2      	lsls	r2, r4, #3
 800377c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003780:	00d9      	lsls	r1, r3, #3
 8003782:	460b      	mov	r3, r1
 8003784:	4614      	mov	r4, r2
 8003786:	195b      	adds	r3, r3, r5
 8003788:	eb44 0406 	adc.w	r4, r4, r6
 800378c:	f04f 0100 	mov.w	r1, #0
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	02a2      	lsls	r2, r4, #10
 8003796:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800379a:	0299      	lsls	r1, r3, #10
 800379c:	460b      	mov	r3, r1
 800379e:	4614      	mov	r4, r2
 80037a0:	4618      	mov	r0, r3
 80037a2:	4621      	mov	r1, r4
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f04f 0400 	mov.w	r4, #0
 80037aa:	461a      	mov	r2, r3
 80037ac:	4623      	mov	r3, r4
 80037ae:	f7fc fd43 	bl	8000238 <__aeabi_uldivmod>
 80037b2:	4603      	mov	r3, r0
 80037b4:	460c      	mov	r4, r1
 80037b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037b8:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	3301      	adds	r3, #1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	60bb      	str	r3, [r7, #8]
      break;
 80037d2:	e002      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037d4:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80037d6:	60bb      	str	r3, [r7, #8]
      break;
 80037d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037da:	68bb      	ldr	r3, [r7, #8]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037e4:	40023800 	.word	0x40023800
 80037e8:	00f42400 	.word	0x00f42400
 80037ec:	007a1200 	.word	0x007a1200

080037f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f4:	4b03      	ldr	r3, [pc, #12]	; (8003804 <HAL_RCC_GetHCLKFreq+0x14>)
 80037f6:	681b      	ldr	r3, [r3, #0]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	20000000 	.word	0x20000000

08003808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800380c:	f7ff fff0 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8003810:	4601      	mov	r1, r0
 8003812:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	0a9b      	lsrs	r3, r3, #10
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4a03      	ldr	r2, [pc, #12]	; (800382c <HAL_RCC_GetPCLK1Freq+0x24>)
 800381e:	5cd3      	ldrb	r3, [r2, r3]
 8003820:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40023800 	.word	0x40023800
 800382c:	08005d68 	.word	0x08005d68

08003830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003834:	f7ff ffdc 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8003838:	4601      	mov	r1, r0
 800383a:	4b05      	ldr	r3, [pc, #20]	; (8003850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	0b5b      	lsrs	r3, r3, #13
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	4a03      	ldr	r2, [pc, #12]	; (8003854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003846:	5cd3      	ldrb	r3, [r2, r3]
 8003848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800384c:	4618      	mov	r0, r3
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40023800 	.word	0x40023800
 8003854:	08005d68 	.word	0x08005d68

08003858 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d012      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003880:	4b69      	ldr	r3, [pc, #420]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	4a68      	ldr	r2, [pc, #416]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003886:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800388a:	6093      	str	r3, [r2, #8]
 800388c:	4b66      	ldr	r3, [pc, #408]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003894:	4964      	ldr	r1, [pc, #400]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038a2:	2301      	movs	r3, #1
 80038a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d017      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038b2:	4b5d      	ldr	r3, [pc, #372]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c0:	4959      	ldr	r1, [pc, #356]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d0:	d101      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038d2:	2301      	movs	r3, #1
 80038d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038de:	2301      	movs	r3, #1
 80038e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d017      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038ee:	4b4e      	ldr	r3, [pc, #312]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	494a      	ldr	r1, [pc, #296]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800390c:	d101      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800390e:	2301      	movs	r3, #1
 8003910:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800391a:	2301      	movs	r3, #1
 800391c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800392a:	2301      	movs	r3, #1
 800392c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 808b 	beq.w	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800393c:	4b3a      	ldr	r3, [pc, #232]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	4a39      	ldr	r2, [pc, #228]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003946:	6413      	str	r3, [r2, #64]	; 0x40
 8003948:	4b37      	ldr	r3, [pc, #220]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003954:	4b35      	ldr	r3, [pc, #212]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a34      	ldr	r2, [pc, #208]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800395a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003960:	f7fd ff02 	bl	8001768 <HAL_GetTick>
 8003964:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003966:	e008      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003968:	f7fd fefe 	bl	8001768 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	; 0x64
 8003974:	d901      	bls.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e38d      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800397a:	4b2c      	ldr	r3, [pc, #176]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003986:	4b28      	ldr	r3, [pc, #160]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d035      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d02e      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039a4:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ae:	4b1e      	ldr	r3, [pc, #120]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039ba:	4b1b      	ldr	r3, [pc, #108]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039be:	4a1a      	ldr	r2, [pc, #104]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039c6:	4a18      	ldr	r2, [pc, #96]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039cc:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d114      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fd fec6 	bl	8001768 <HAL_GetTick>
 80039dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039de:	e00a      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e0:	f7fd fec2 	bl	8001768 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e34f      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f6:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0ee      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a0e:	d111      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a10:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a1e:	400b      	ands	r3, r1
 8003a20:	4901      	ldr	r1, [pc, #4]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
 8003a26:	e00b      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40007000 	.word	0x40007000
 8003a30:	0ffffcff 	.word	0x0ffffcff
 8003a34:	4bb3      	ldr	r3, [pc, #716]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4ab2      	ldr	r2, [pc, #712]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a3e:	6093      	str	r3, [r2, #8]
 8003a40:	4bb0      	ldr	r3, [pc, #704]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4c:	49ad      	ldr	r1, [pc, #692]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d010      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a5e:	4ba9      	ldr	r3, [pc, #676]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a64:	4aa7      	ldr	r2, [pc, #668]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a6e:	4ba5      	ldr	r3, [pc, #660]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	49a2      	ldr	r1, [pc, #648]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a8c:	4b9d      	ldr	r3, [pc, #628]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a9a:	499a      	ldr	r1, [pc, #616]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aae:	4b95      	ldr	r3, [pc, #596]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003abc:	4991      	ldr	r1, [pc, #580]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ad0:	4b8c      	ldr	r3, [pc, #560]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ade:	4989      	ldr	r1, [pc, #548]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003af2:	4b84      	ldr	r3, [pc, #528]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	4980      	ldr	r1, [pc, #512]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b14:	4b7b      	ldr	r3, [pc, #492]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	f023 0203 	bic.w	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	4978      	ldr	r1, [pc, #480]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b36:	4b73      	ldr	r3, [pc, #460]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3c:	f023 020c 	bic.w	r2, r3, #12
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b44:	496f      	ldr	r1, [pc, #444]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b58:	4b6a      	ldr	r3, [pc, #424]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b66:	4967      	ldr	r1, [pc, #412]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b7a:	4b62      	ldr	r3, [pc, #392]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b80:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b88:	495e      	ldr	r1, [pc, #376]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b9c:	4b59      	ldr	r3, [pc, #356]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	4956      	ldr	r1, [pc, #344]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bbe:	4b51      	ldr	r3, [pc, #324]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	494d      	ldr	r1, [pc, #308]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003be0:	4b48      	ldr	r3, [pc, #288]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bee:	4945      	ldr	r1, [pc, #276]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c02:	4b40      	ldr	r3, [pc, #256]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c10:	493c      	ldr	r1, [pc, #240]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c24:	4b37      	ldr	r3, [pc, #220]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c32:	4934      	ldr	r1, [pc, #208]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d011      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c46:	4b2f      	ldr	r3, [pc, #188]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c54:	492b      	ldr	r1, [pc, #172]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c64:	d101      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c66:	2301      	movs	r3, #1
 8003c68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c76:	2301      	movs	r3, #1
 8003c78:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c86:	4b1f      	ldr	r3, [pc, #124]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c94:	491b      	ldr	r1, [pc, #108]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00b      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ca8:	4b16      	ldr	r3, [pc, #88]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cb8:	4912      	ldr	r1, [pc, #72]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00b      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ccc:	4b0d      	ldr	r3, [pc, #52]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cdc:	4909      	ldr	r1, [pc, #36]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00f      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	e002      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003d02:	bf00      	nop
 8003d04:	40023800 	.word	0x40023800
 8003d08:	4985      	ldr	r1, [pc, #532]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00b      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d1c:	4b80      	ldr	r3, [pc, #512]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d22:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d2c:	497c      	ldr	r1, [pc, #496]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d005      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d42:	f040 80d6 	bne.w	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d46:	4b76      	ldr	r3, [pc, #472]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a75      	ldr	r2, [pc, #468]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d52:	f7fd fd09 	bl	8001768 <HAL_GetTick>
 8003d56:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d58:	e008      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d5a:	f7fd fd05 	bl	8001768 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b64      	cmp	r3, #100	; 0x64
 8003d66:	d901      	bls.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e194      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d6c:	4b6c      	ldr	r3, [pc, #432]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1f0      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d021      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d11d      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d8c:	4b64      	ldr	r3, [pc, #400]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d92:	0c1b      	lsrs	r3, r3, #16
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d9a:	4b61      	ldr	r3, [pc, #388]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da0:	0e1b      	lsrs	r3, r3, #24
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	019a      	lsls	r2, r3, #6
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	041b      	lsls	r3, r3, #16
 8003db2:	431a      	orrs	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	061b      	lsls	r3, r3, #24
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	071b      	lsls	r3, r3, #28
 8003dc0:	4957      	ldr	r1, [pc, #348]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d004      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ddc:	d00a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d02e      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003df2:	d129      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003df4:	4b4a      	ldr	r3, [pc, #296]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dfa:	0c1b      	lsrs	r3, r3, #16
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e02:	4b47      	ldr	r3, [pc, #284]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e08:	0f1b      	lsrs	r3, r3, #28
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	019a      	lsls	r2, r3, #6
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	041b      	lsls	r3, r3, #16
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	061b      	lsls	r3, r3, #24
 8003e22:	431a      	orrs	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	071b      	lsls	r3, r3, #28
 8003e28:	493d      	ldr	r1, [pc, #244]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e30:	4b3b      	ldr	r3, [pc, #236]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e36:	f023 021f 	bic.w	r2, r3, #31
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	4937      	ldr	r1, [pc, #220]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01d      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e54:	4b32      	ldr	r3, [pc, #200]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e5a:	0e1b      	lsrs	r3, r3, #24
 8003e5c:	f003 030f 	and.w	r3, r3, #15
 8003e60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e62:	4b2f      	ldr	r3, [pc, #188]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e68:	0f1b      	lsrs	r3, r3, #28
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	019a      	lsls	r2, r3, #6
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	041b      	lsls	r3, r3, #16
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	061b      	lsls	r3, r3, #24
 8003e82:	431a      	orrs	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	071b      	lsls	r3, r3, #28
 8003e88:	4925      	ldr	r1, [pc, #148]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d011      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	019a      	lsls	r2, r3, #6
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	041b      	lsls	r3, r3, #16
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	061b      	lsls	r3, r3, #24
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	071b      	lsls	r3, r3, #28
 8003eb8:	4919      	ldr	r1, [pc, #100]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ec0:	4b17      	ldr	r3, [pc, #92]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a16      	ldr	r2, [pc, #88]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ec6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003eca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ecc:	f7fd fc4c 	bl	8001768 <HAL_GetTick>
 8003ed0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ed4:	f7fd fc48 	bl	8001768 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b64      	cmp	r3, #100	; 0x64
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e0d7      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ee6:	4b0e      	ldr	r3, [pc, #56]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	f040 80cd 	bne.w	8004094 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a08      	ldr	r2, [pc, #32]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f06:	f7fd fc2f 	bl	8001768 <HAL_GetTick>
 8003f0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f0c:	e00a      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f0e:	f7fd fc2b 	bl	8001768 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b64      	cmp	r3, #100	; 0x64
 8003f1a:	d903      	bls.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e0ba      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003f20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f24:	4b5e      	ldr	r3, [pc, #376]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f30:	d0ed      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d009      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d02e      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d12a      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f5a:	4b51      	ldr	r3, [pc, #324]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f60:	0c1b      	lsrs	r3, r3, #16
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f68:	4b4d      	ldr	r3, [pc, #308]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6e:	0f1b      	lsrs	r3, r3, #28
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	019a      	lsls	r2, r3, #6
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	041b      	lsls	r3, r3, #16
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	061b      	lsls	r3, r3, #24
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	071b      	lsls	r3, r3, #28
 8003f8e:	4944      	ldr	r1, [pc, #272]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f96:	4b42      	ldr	r3, [pc, #264]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	493d      	ldr	r1, [pc, #244]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d022      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fc4:	d11d      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fc6:	4b36      	ldr	r3, [pc, #216]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	0e1b      	lsrs	r3, r3, #24
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fd4:	4b32      	ldr	r3, [pc, #200]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	0f1b      	lsrs	r3, r3, #28
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	019a      	lsls	r2, r3, #6
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	061b      	lsls	r3, r3, #24
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	071b      	lsls	r3, r3, #28
 8003ffa:	4929      	ldr	r1, [pc, #164]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d028      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800400e:	4b24      	ldr	r3, [pc, #144]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004014:	0e1b      	lsrs	r3, r3, #24
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800401c:	4b20      	ldr	r3, [pc, #128]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	0c1b      	lsrs	r3, r3, #16
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	019a      	lsls	r2, r3, #6
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	041b      	lsls	r3, r3, #16
 8004034:	431a      	orrs	r2, r3
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	061b      	lsls	r3, r3, #24
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	071b      	lsls	r3, r3, #28
 8004042:	4917      	ldr	r1, [pc, #92]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800404a:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800404c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004050:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	4911      	ldr	r1, [pc, #68]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406c:	f7fd fb7c 	bl	8001768 <HAL_GetTick>
 8004070:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004074:	f7fd fb78 	bl	8001768 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b64      	cmp	r3, #100	; 0x64
 8004080:	d901      	bls.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e007      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800408e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004092:	d1ef      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3720      	adds	r7, #32
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800

080040a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e06b      	b.n	800418e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	7f5b      	ldrb	r3, [r3, #29]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d105      	bne.n	80040cc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fd f952 	bl	8001370 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	22ca      	movs	r2, #202	; 0xca
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2253      	movs	r2, #83	; 0x53
 80040e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fa96 	bl	8004614 <RTC_EnterInitMode>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	22ff      	movs	r2, #255	; 0xff
 80040f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2204      	movs	r2, #4
 80040fa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e046      	b.n	800418e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6899      	ldr	r1, [r3, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	4b23      	ldr	r3, [pc, #140]	; (8004198 <HAL_RTC_Init+0xf4>)
 800410c:	400b      	ands	r3, r1
 800410e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6899      	ldr	r1, [r3, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68d2      	ldr	r2, [r2, #12]
 8004136:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6919      	ldr	r1, [r3, #16]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	041a      	lsls	r2, r3, #16
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800415a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0208 	bic.w	r2, r2, #8
 800416a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	22ff      	movs	r2, #255	; 0xff
 8004184:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800418c:	2300      	movs	r3, #0
  }
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	ff8fffbf 	.word	0xff8fffbf

0800419c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800419c:	b590      	push	{r4, r7, lr}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	7f1b      	ldrb	r3, [r3, #28]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_RTC_SetTime+0x1c>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e0a8      	b.n	800430a <HAL_RTC_SetTime+0x16e>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2202      	movs	r2, #2
 80041c2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d126      	bne.n	8004218 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d102      	bne.n	80041de <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2200      	movs	r2, #0
 80041dc:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fa42 	bl	800466c <RTC_ByteToBcd2>
 80041e8:	4603      	mov	r3, r0
 80041ea:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	785b      	ldrb	r3, [r3, #1]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fa3b 	bl	800466c <RTC_ByteToBcd2>
 80041f6:	4603      	mov	r3, r0
 80041f8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80041fa:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	789b      	ldrb	r3, [r3, #2]
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fa33 	bl	800466c <RTC_ByteToBcd2>
 8004206:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004208:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	7b1b      	ldrb	r3, [r3, #12]
 8004210:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	e018      	b.n	800424a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2200      	movs	r2, #0
 800422a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	785b      	ldrb	r3, [r3, #1]
 8004236:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004238:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800423e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	7b1b      	ldrb	r3, [r3, #12]
 8004244:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004246:	4313      	orrs	r3, r2
 8004248:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	22ca      	movs	r2, #202	; 0xca
 8004250:	625a      	str	r2, [r3, #36]	; 0x24
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2253      	movs	r2, #83	; 0x53
 8004258:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f9da 	bl	8004614 <RTC_EnterInitMode>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00b      	beq.n	800427e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	22ff      	movs	r2, #255	; 0xff
 800426c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2204      	movs	r2, #4
 8004272:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e045      	b.n	800430a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	6979      	ldr	r1, [r7, #20]
 8004284:	4b23      	ldr	r3, [pc, #140]	; (8004314 <HAL_RTC_SetTime+0x178>)
 8004286:	400b      	ands	r3, r1
 8004288:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004298:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6899      	ldr	r1, [r3, #8]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042c0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d111      	bne.n	80042f4 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f977 	bl	80045c4 <HAL_RTC_WaitForSynchro>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00b      	beq.n	80042f4 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	22ff      	movs	r2, #255	; 0xff
 80042e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2204      	movs	r2, #4
 80042e8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e00a      	b.n	800430a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	22ff      	movs	r2, #255	; 0xff
 80042fa:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2201      	movs	r2, #1
 8004300:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004308:	2300      	movs	r3, #0
  }
}
 800430a:	4618      	mov	r0, r3
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	bd90      	pop	{r4, r7, pc}
 8004312:	bf00      	nop
 8004314:	007f7f7f 	.word	0x007f7f7f

08004318 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4b22      	ldr	r3, [pc, #136]	; (80043d0 <HAL_RTC_GetTime+0xb8>)
 8004348:	4013      	ands	r3, r2
 800434a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	0c1b      	lsrs	r3, r3, #16
 8004350:	b2db      	uxtb	r3, r3
 8004352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004356:	b2da      	uxtb	r2, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	0a1b      	lsrs	r3, r3, #8
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004366:	b2da      	uxtb	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004374:	b2da      	uxtb	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	b2db      	uxtb	r3, r3
 8004380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004384:	b2da      	uxtb	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d11a      	bne.n	80043c6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 f987 	bl	80046a8 <RTC_Bcd2ToByte>
 800439a:	4603      	mov	r3, r0
 800439c:	461a      	mov	r2, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	785b      	ldrb	r3, [r3, #1]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f97e 	bl	80046a8 <RTC_Bcd2ToByte>
 80043ac:	4603      	mov	r3, r0
 80043ae:	461a      	mov	r2, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	789b      	ldrb	r3, [r3, #2]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f975 	bl	80046a8 <RTC_Bcd2ToByte>
 80043be:	4603      	mov	r3, r0
 80043c0:	461a      	mov	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	007f7f7f 	.word	0x007f7f7f

080043d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80043d4:	b590      	push	{r4, r7, lr}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	7f1b      	ldrb	r3, [r3, #28]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_RTC_SetDate+0x1c>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e092      	b.n	8004516 <HAL_RTC_SetDate+0x142>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2202      	movs	r2, #2
 80043fa:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10e      	bne.n	8004420 <HAL_RTC_SetDate+0x4c>
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	785b      	ldrb	r3, [r3, #1]
 8004406:	f003 0310 	and.w	r3, r3, #16
 800440a:	2b00      	cmp	r3, #0
 800440c:	d008      	beq.n	8004420 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	785b      	ldrb	r3, [r3, #1]
 8004412:	f023 0310 	bic.w	r3, r3, #16
 8004416:	b2db      	uxtb	r3, r3
 8004418:	330a      	adds	r3, #10
 800441a:	b2da      	uxtb	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d11c      	bne.n	8004460 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	78db      	ldrb	r3, [r3, #3]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f91e 	bl	800466c <RTC_ByteToBcd2>
 8004430:	4603      	mov	r3, r0
 8004432:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	785b      	ldrb	r3, [r3, #1]
 8004438:	4618      	mov	r0, r3
 800443a:	f000 f917 	bl	800466c <RTC_ByteToBcd2>
 800443e:	4603      	mov	r3, r0
 8004440:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004442:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	789b      	ldrb	r3, [r3, #2]
 8004448:	4618      	mov	r0, r3
 800444a:	f000 f90f 	bl	800466c <RTC_ByteToBcd2>
 800444e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8004450:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	e00e      	b.n	800447e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	78db      	ldrb	r3, [r3, #3]
 8004464:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	785b      	ldrb	r3, [r3, #1]
 800446a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800446c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8004472:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	22ca      	movs	r2, #202	; 0xca
 8004484:	625a      	str	r2, [r3, #36]	; 0x24
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2253      	movs	r2, #83	; 0x53
 800448c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f8c0 	bl	8004614 <RTC_EnterInitMode>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00b      	beq.n	80044b2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	22ff      	movs	r2, #255	; 0xff
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2204      	movs	r2, #4
 80044a6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e031      	b.n	8004516 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	6979      	ldr	r1, [r7, #20]
 80044b8:	4b19      	ldr	r3, [pc, #100]	; (8004520 <HAL_RTC_SetDate+0x14c>)
 80044ba:	400b      	ands	r3, r1
 80044bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044cc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d111      	bne.n	8004500 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f871 	bl	80045c4 <HAL_RTC_WaitForSynchro>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00b      	beq.n	8004500 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	22ff      	movs	r2, #255	; 0xff
 80044ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2204      	movs	r2, #4
 80044f4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e00a      	b.n	8004516 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	22ff      	movs	r2, #255	; 0xff
 8004506:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004514:	2300      	movs	r3, #0
  }
}
 8004516:	4618      	mov	r0, r3
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	bd90      	pop	{r4, r7, pc}
 800451e:	bf00      	nop
 8004520:	00ffff3f 	.word	0x00ffff3f

08004524 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	4b21      	ldr	r3, [pc, #132]	; (80045c0 <HAL_RTC_GetDate+0x9c>)
 800453c:	4013      	ands	r3, r2
 800453e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	0c1b      	lsrs	r3, r3, #16
 8004544:	b2da      	uxtb	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	0a1b      	lsrs	r3, r3, #8
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	b2da      	uxtb	r2, r3
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004562:	b2da      	uxtb	r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	0b5b      	lsrs	r3, r3, #13
 800456c:	b2db      	uxtb	r3, r3
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	b2da      	uxtb	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d11a      	bne.n	80045b4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	78db      	ldrb	r3, [r3, #3]
 8004582:	4618      	mov	r0, r3
 8004584:	f000 f890 	bl	80046a8 <RTC_Bcd2ToByte>
 8004588:	4603      	mov	r3, r0
 800458a:	461a      	mov	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	785b      	ldrb	r3, [r3, #1]
 8004594:	4618      	mov	r0, r3
 8004596:	f000 f887 	bl	80046a8 <RTC_Bcd2ToByte>
 800459a:	4603      	mov	r3, r0
 800459c:	461a      	mov	r2, r3
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	789b      	ldrb	r3, [r3, #2]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 f87e 	bl	80046a8 <RTC_Bcd2ToByte>
 80045ac:	4603      	mov	r3, r0
 80045ae:	461a      	mov	r2, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	00ffff3f 	.word	0x00ffff3f

080045c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045de:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045e0:	f7fd f8c2 	bl	8001768 <HAL_GetTick>
 80045e4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80045e6:	e009      	b.n	80045fc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80045e8:	f7fd f8be 	bl	8001768 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045f6:	d901      	bls.n	80045fc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e007      	b.n	800460c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0ee      	beq.n	80045e8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d119      	bne.n	8004662 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f04f 32ff 	mov.w	r2, #4294967295
 8004636:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004638:	f7fd f896 	bl	8001768 <HAL_GetTick>
 800463c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800463e:	e009      	b.n	8004654 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004640:	f7fd f892 	bl	8001768 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800464e:	d901      	bls.n	8004654 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e007      	b.n	8004664 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0ee      	beq.n	8004640 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800467a:	e005      	b.n	8004688 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3301      	adds	r3, #1
 8004680:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	3b0a      	subs	r3, #10
 8004686:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	2b09      	cmp	r3, #9
 800468c:	d8f6      	bhi.n	800467c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	b2da      	uxtb	r2, r3
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	4313      	orrs	r3, r2
 800469a:	b2db      	uxtb	r3, r3
}
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	091b      	lsrs	r3, r3, #4
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	4413      	add	r3, r2
 80046d6:	b2db      	uxtb	r3, r3
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e084      	b.n	8004800 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7fc fe47 	bl	80013a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2202      	movs	r2, #2
 800471a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004736:	d902      	bls.n	800473e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	e002      	b.n	8004744 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800473e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004742:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800474c:	d007      	beq.n	800475e <HAL_SPI_Init+0x7a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004756:	d002      	beq.n	800475e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10b      	bne.n	800477e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800476e:	d903      	bls.n	8004778 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	631a      	str	r2, [r3, #48]	; 0x30
 8004776:	e002      	b.n	800477e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	ea42 0103 	orr.w	r1, r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	0c1b      	lsrs	r3, r3, #16
 80047be:	f003 0204 	and.w	r2, r3, #4
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	ea42 0103 	orr.w	r1, r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	430a      	orrs	r2, r1
 80047de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	69da      	ldr	r2, [r3, #28]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004822:	2b01      	cmp	r3, #1
 8004824:	d101      	bne.n	800482a <HAL_SPI_Transmit+0x22>
 8004826:	2302      	movs	r3, #2
 8004828:	e150      	b.n	8004acc <HAL_SPI_Transmit+0x2c4>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004832:	f7fc ff99 	bl	8001768 <HAL_GetTick>
 8004836:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004838:	88fb      	ldrh	r3, [r7, #6]
 800483a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b01      	cmp	r3, #1
 8004846:	d002      	beq.n	800484e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004848:	2302      	movs	r3, #2
 800484a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800484c:	e135      	b.n	8004aba <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_SPI_Transmit+0x52>
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d102      	bne.n	8004860 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800485e:	e12c      	b.n	8004aba <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2203      	movs	r2, #3
 8004864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	88fa      	ldrh	r2, [r7, #6]
 8004878:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	88fa      	ldrh	r2, [r7, #6]
 800487e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048aa:	d107      	bne.n	80048bc <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c6:	2b40      	cmp	r3, #64	; 0x40
 80048c8:	d007      	beq.n	80048da <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048e2:	d94b      	bls.n	800497c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <HAL_SPI_Transmit+0xea>
 80048ec:	8afb      	ldrh	r3, [r7, #22]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d13e      	bne.n	8004970 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	881a      	ldrh	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	1c9a      	adds	r2, r3, #2
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004916:	e02b      	b.n	8004970 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b02      	cmp	r3, #2
 8004924:	d112      	bne.n	800494c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	881a      	ldrh	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	1c9a      	adds	r2, r3, #2
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	87da      	strh	r2, [r3, #62]	; 0x3e
 800494a:	e011      	b.n	8004970 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800494c:	f7fc ff0c 	bl	8001768 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d803      	bhi.n	8004964 <HAL_SPI_Transmit+0x15c>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004962:	d102      	bne.n	800496a <HAL_SPI_Transmit+0x162>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d102      	bne.n	8004970 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800496e:	e0a4      	b.n	8004aba <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1ce      	bne.n	8004918 <HAL_SPI_Transmit+0x110>
 800497a:	e07c      	b.n	8004a76 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <HAL_SPI_Transmit+0x182>
 8004984:	8afb      	ldrh	r3, [r7, #22]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d170      	bne.n	8004a6c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	d912      	bls.n	80049ba <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	881a      	ldrh	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	1c9a      	adds	r2, r3, #2
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b02      	subs	r3, #2
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049b8:	e058      	b.n	8004a6c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	330c      	adds	r3, #12
 80049c4:	7812      	ldrb	r2, [r2, #0]
 80049c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80049e0:	e044      	b.n	8004a6c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d12b      	bne.n	8004a48 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d912      	bls.n	8004a20 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	881a      	ldrh	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	1c9a      	adds	r2, r3, #2
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b02      	subs	r3, #2
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a1e:	e025      	b.n	8004a6c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	330c      	adds	r3, #12
 8004a2a:	7812      	ldrb	r2, [r2, #0]
 8004a2c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a46:	e011      	b.n	8004a6c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a48:	f7fc fe8e 	bl	8001768 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d803      	bhi.n	8004a60 <HAL_SPI_Transmit+0x258>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5e:	d102      	bne.n	8004a66 <HAL_SPI_Transmit+0x25e>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d102      	bne.n	8004a6c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a6a:	e026      	b.n	8004aba <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1b5      	bne.n	80049e2 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	6839      	ldr	r1, [r7, #0]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fc94 	bl	80053a8 <SPI_EndRxTxTransaction>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10a      	bne.n	8004aaa <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a94:	2300      	movs	r3, #0
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	e000      	b.n	8004aba <HAL_SPI_Transmit+0x2b2>
  }

error:
 8004ab8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004aca:	7ffb      	ldrb	r3, [r7, #31]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3720      	adds	r7, #32
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004af0:	d112      	bne.n	8004b18 <HAL_SPI_Receive+0x44>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10e      	bne.n	8004b18 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2204      	movs	r2, #4
 8004afe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b02:	88fa      	ldrh	r2, [r7, #6]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f908 	bl	8004d24 <HAL_SPI_TransmitReceive>
 8004b14:	4603      	mov	r3, r0
 8004b16:	e101      	b.n	8004d1c <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d101      	bne.n	8004b26 <HAL_SPI_Receive+0x52>
 8004b22:	2302      	movs	r3, #2
 8004b24:	e0fa      	b.n	8004d1c <HAL_SPI_Receive+0x248>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b2e:	f7fc fe1b 	bl	8001768 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d002      	beq.n	8004b46 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b40:	2302      	movs	r3, #2
 8004b42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b44:	e0e1      	b.n	8004d0a <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_SPI_Receive+0x7e>
 8004b4c:	88fb      	ldrh	r3, [r7, #6]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d102      	bne.n	8004b58 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b56:	e0d8      	b.n	8004d0a <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2204      	movs	r2, #4
 8004b5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	88fa      	ldrh	r2, [r7, #6]
 8004b70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ba2:	d908      	bls.n	8004bb6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bb2:	605a      	str	r2, [r3, #4]
 8004bb4:	e007      	b.n	8004bc6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bc4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bce:	d107      	bne.n	8004be0 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bde:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bea:	2b40      	cmp	r3, #64	; 0x40
 8004bec:	d007      	beq.n	8004bfe <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bfc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c06:	d867      	bhi.n	8004cd8 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c08:	e030      	b.n	8004c6c <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d117      	bne.n	8004c48 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f103 020c 	add.w	r2, r3, #12
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	7812      	ldrb	r2, [r2, #0]
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004c46:	e011      	b.n	8004c6c <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c48:	f7fc fd8e 	bl	8001768 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d803      	bhi.n	8004c60 <HAL_SPI_Receive+0x18c>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5e:	d102      	bne.n	8004c66 <HAL_SPI_Receive+0x192>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d102      	bne.n	8004c6c <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c6a:	e04e      	b.n	8004d0a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1c8      	bne.n	8004c0a <HAL_SPI_Receive+0x136>
 8004c78:	e034      	b.n	8004ce4 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d115      	bne.n	8004cb4 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	b292      	uxth	r2, r2
 8004c94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	1c9a      	adds	r2, r3, #2
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004cb2:	e011      	b.n	8004cd8 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cb4:	f7fc fd58 	bl	8001768 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d803      	bhi.n	8004ccc <HAL_SPI_Receive+0x1f8>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cca:	d102      	bne.n	8004cd2 <HAL_SPI_Receive+0x1fe>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d102      	bne.n	8004cd8 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cd6:	e018      	b.n	8004d0a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1ca      	bne.n	8004c7a <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	6839      	ldr	r1, [r7, #0]
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fb05 	bl	80052f8 <SPI_EndRxTransaction>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	75fb      	strb	r3, [r7, #23]
 8004d06:	e000      	b.n	8004d0a <HAL_SPI_Receive+0x236>
  }

error :
 8004d08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	; 0x28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d32:	2301      	movs	r3, #1
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_SPI_TransmitReceive+0x26>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e1fb      	b.n	8005142 <HAL_SPI_TransmitReceive+0x41e>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d52:	f7fc fd09 	bl	8001768 <HAL_GetTick>
 8004d56:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d5e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004d66:	887b      	ldrh	r3, [r7, #2]
 8004d68:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004d6a:	887b      	ldrh	r3, [r7, #2]
 8004d6c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d6e:	7efb      	ldrb	r3, [r7, #27]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d00e      	beq.n	8004d92 <HAL_SPI_TransmitReceive+0x6e>
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d7a:	d106      	bne.n	8004d8a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d102      	bne.n	8004d8a <HAL_SPI_TransmitReceive+0x66>
 8004d84:	7efb      	ldrb	r3, [r7, #27]
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d003      	beq.n	8004d92 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004d90:	e1cd      	b.n	800512e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_SPI_TransmitReceive+0x80>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <HAL_SPI_TransmitReceive+0x80>
 8004d9e:	887b      	ldrh	r3, [r7, #2]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d103      	bne.n	8004dac <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004daa:	e1c0      	b.n	800512e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d003      	beq.n	8004dc0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2205      	movs	r2, #5
 8004dbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	887a      	ldrh	r2, [r7, #2]
 8004dd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	887a      	ldrh	r2, [r7, #2]
 8004dd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	887a      	ldrh	r2, [r7, #2]
 8004de6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	887a      	ldrh	r2, [r7, #2]
 8004dec:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e02:	d802      	bhi.n	8004e0a <HAL_SPI_TransmitReceive+0xe6>
 8004e04:	8a3b      	ldrh	r3, [r7, #16]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d908      	bls.n	8004e1c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	e007      	b.n	8004e2c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e2a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e36:	2b40      	cmp	r3, #64	; 0x40
 8004e38:	d007      	beq.n	8004e4a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e52:	d97c      	bls.n	8004f4e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <HAL_SPI_TransmitReceive+0x13e>
 8004e5c:	8a7b      	ldrh	r3, [r7, #18]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d169      	bne.n	8004f36 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	881a      	ldrh	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	1c9a      	adds	r2, r3, #2
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e86:	e056      	b.n	8004f36 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d11b      	bne.n	8004ece <HAL_SPI_TransmitReceive+0x1aa>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d016      	beq.n	8004ece <HAL_SPI_TransmitReceive+0x1aa>
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d113      	bne.n	8004ece <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eaa:	881a      	ldrh	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	1c9a      	adds	r2, r3, #2
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d11c      	bne.n	8004f16 <HAL_SPI_TransmitReceive+0x1f2>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d016      	beq.n	8004f16 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	b292      	uxth	r2, r2
 8004ef4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	1c9a      	adds	r2, r3, #2
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f12:	2301      	movs	r3, #1
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f16:	f7fc fc27 	bl	8001768 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d807      	bhi.n	8004f36 <HAL_SPI_TransmitReceive+0x212>
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2c:	d003      	beq.n	8004f36 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f34:	e0fb      	b.n	800512e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1a3      	bne.n	8004e88 <HAL_SPI_TransmitReceive+0x164>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d19d      	bne.n	8004e88 <HAL_SPI_TransmitReceive+0x164>
 8004f4c:	e0df      	b.n	800510e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_SPI_TransmitReceive+0x23a>
 8004f56:	8a7b      	ldrh	r3, [r7, #18]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	f040 80cb 	bne.w	80050f4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d912      	bls.n	8004f8e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	881a      	ldrh	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	1c9a      	adds	r2, r3, #2
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	3b02      	subs	r3, #2
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f8c:	e0b2      	b.n	80050f4 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	330c      	adds	r3, #12
 8004f98:	7812      	ldrb	r2, [r2, #0]
 8004f9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fb4:	e09e      	b.n	80050f4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d134      	bne.n	800502e <HAL_SPI_TransmitReceive+0x30a>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d02f      	beq.n	800502e <HAL_SPI_TransmitReceive+0x30a>
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d12c      	bne.n	800502e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d912      	bls.n	8005004 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	881a      	ldrh	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fee:	1c9a      	adds	r2, r3, #2
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b02      	subs	r3, #2
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005002:	e012      	b.n	800502a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	330c      	adds	r3, #12
 800500e:	7812      	ldrb	r2, [r2, #0]
 8005010:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b01      	cmp	r3, #1
 800503a:	d148      	bne.n	80050ce <HAL_SPI_TransmitReceive+0x3aa>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d042      	beq.n	80050ce <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800504e:	b29b      	uxth	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d923      	bls.n	800509c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	b292      	uxth	r2, r2
 8005060:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	1c9a      	adds	r2, r3, #2
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005072:	b29b      	uxth	r3, r3
 8005074:	3b02      	subs	r3, #2
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b01      	cmp	r3, #1
 8005088:	d81f      	bhi.n	80050ca <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	e016      	b.n	80050ca <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f103 020c 	add.w	r2, r3, #12
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	7812      	ldrb	r2, [r2, #0]
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050ca:	2301      	movs	r3, #1
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050ce:	f7fc fb4b 	bl	8001768 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	429a      	cmp	r2, r3
 80050dc:	d803      	bhi.n	80050e6 <HAL_SPI_TransmitReceive+0x3c2>
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d102      	bne.n	80050ec <HAL_SPI_TransmitReceive+0x3c8>
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d103      	bne.n	80050f4 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80050f2:	e01c      	b.n	800512e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f47f af5b 	bne.w	8004fb6 <HAL_SPI_TransmitReceive+0x292>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005106:	b29b      	uxth	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	f47f af54 	bne.w	8004fb6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800510e:	69fa      	ldr	r2, [r7, #28]
 8005110:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 f948 	bl	80053a8 <SPI_EndRxTxTransaction>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d006      	beq.n	800512c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2220      	movs	r2, #32
 8005128:	661a      	str	r2, [r3, #96]	; 0x60
 800512a:	e000      	b.n	800512e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800512c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800513e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005142:	4618      	mov	r0, r3
 8005144:	3728      	adds	r7, #40	; 0x28
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	603b      	str	r3, [r7, #0]
 8005156:	4613      	mov	r3, r2
 8005158:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800515a:	e04c      	b.n	80051f6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005162:	d048      	beq.n	80051f6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005164:	f7fc fb00 	bl	8001768 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	429a      	cmp	r2, r3
 8005172:	d902      	bls.n	800517a <SPI_WaitFlagStateUntilTimeout+0x30>
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d13d      	bne.n	80051f6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005188:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005192:	d111      	bne.n	80051b8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800519c:	d004      	beq.n	80051a8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a6:	d107      	bne.n	80051b8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c0:	d10f      	bne.n	80051e2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e00f      	b.n	8005216 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4013      	ands	r3, r2
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	429a      	cmp	r2, r3
 8005204:	bf0c      	ite	eq
 8005206:	2301      	moveq	r3, #1
 8005208:	2300      	movne	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	429a      	cmp	r2, r3
 8005212:	d1a3      	bne.n	800515c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	607a      	str	r2, [r7, #4]
 800522a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800522c:	e057      	b.n	80052de <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005234:	d106      	bne.n	8005244 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d103      	bne.n	8005244 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	330c      	adds	r3, #12
 8005242:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524a:	d048      	beq.n	80052de <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800524c:	f7fc fa8c 	bl	8001768 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d902      	bls.n	8005262 <SPI_WaitFifoStateUntilTimeout+0x44>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d13d      	bne.n	80052de <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005270:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800527a:	d111      	bne.n	80052a0 <SPI_WaitFifoStateUntilTimeout+0x82>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005284:	d004      	beq.n	8005290 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800528e:	d107      	bne.n	80052a0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800529e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a8:	d10f      	bne.n	80052ca <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e008      	b.n	80052f0 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4013      	ands	r3, r2
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d19f      	bne.n	800522e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800530c:	d111      	bne.n	8005332 <SPI_EndRxTransaction+0x3a>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005316:	d004      	beq.n	8005322 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005320:	d107      	bne.n	8005332 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005330:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2200      	movs	r2, #0
 800533a:	2180      	movs	r1, #128	; 0x80
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f7ff ff04 	bl	800514a <SPI_WaitFlagStateUntilTimeout>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800534c:	f043 0220 	orr.w	r2, r3, #32
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e023      	b.n	80053a0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005360:	d11d      	bne.n	800539e <SPI_EndRxTransaction+0xa6>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800536a:	d004      	beq.n	8005376 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005374:	d113      	bne.n	800539e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2200      	movs	r2, #0
 800537e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f7ff ff4b 	bl	800521e <SPI_WaitFifoStateUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d007      	beq.n	800539e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005392:	f043 0220 	orr.w	r2, r3, #32
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e000      	b.n	80053a0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f7ff ff2c 	bl	800521e <SPI_WaitFifoStateUntilTimeout>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d007      	beq.n	80053dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d0:	f043 0220 	orr.w	r2, r3, #32
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e027      	b.n	800542c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2200      	movs	r2, #0
 80053e4:	2180      	movs	r1, #128	; 0x80
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff feaf 	bl	800514a <SPI_WaitFlagStateUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d007      	beq.n	8005402 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f6:	f043 0220 	orr.w	r2, r3, #32
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e014      	b.n	800542c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2200      	movs	r2, #0
 800540a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f7ff ff05 	bl	800521e <SPI_WaitFifoStateUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d007      	beq.n	800542a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800541e:	f043 0220 	orr.w	r2, r3, #32
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e000      	b.n	800542c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e040      	b.n	80054c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7fb ffe8 	bl	800142c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2224      	movs	r2, #36	; 0x24
 8005460:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 0201 	bic.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f82c 	bl	80054d0 <UART_SetConfig>
 8005478:	4603      	mov	r3, r0
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e022      	b.n	80054c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 faca 	bl	8005a24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800549e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fb51 	bl	8005b68 <UART_CheckIdleState>
 80054c6:	4603      	mov	r3, r0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80054d8:	2300      	movs	r3, #0
 80054da:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	4bb1      	ldr	r3, [pc, #708]	; (80057c4 <UART_SetConfig+0x2f4>)
 8005500:	4013      	ands	r3, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6812      	ldr	r2, [r2, #0]
 8005506:	6939      	ldr	r1, [r7, #16]
 8005508:	430b      	orrs	r3, r1
 800550a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	430a      	orrs	r2, r1
 8005544:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a9f      	ldr	r2, [pc, #636]	; (80057c8 <UART_SetConfig+0x2f8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d121      	bne.n	8005594 <UART_SetConfig+0xc4>
 8005550:	4b9e      	ldr	r3, [pc, #632]	; (80057cc <UART_SetConfig+0x2fc>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	2b03      	cmp	r3, #3
 800555c:	d816      	bhi.n	800558c <UART_SetConfig+0xbc>
 800555e:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <UART_SetConfig+0x94>)
 8005560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005564:	08005575 	.word	0x08005575
 8005568:	08005581 	.word	0x08005581
 800556c:	0800557b 	.word	0x0800557b
 8005570:	08005587 	.word	0x08005587
 8005574:	2301      	movs	r3, #1
 8005576:	77fb      	strb	r3, [r7, #31]
 8005578:	e151      	b.n	800581e <UART_SetConfig+0x34e>
 800557a:	2302      	movs	r3, #2
 800557c:	77fb      	strb	r3, [r7, #31]
 800557e:	e14e      	b.n	800581e <UART_SetConfig+0x34e>
 8005580:	2304      	movs	r3, #4
 8005582:	77fb      	strb	r3, [r7, #31]
 8005584:	e14b      	b.n	800581e <UART_SetConfig+0x34e>
 8005586:	2308      	movs	r3, #8
 8005588:	77fb      	strb	r3, [r7, #31]
 800558a:	e148      	b.n	800581e <UART_SetConfig+0x34e>
 800558c:	2310      	movs	r3, #16
 800558e:	77fb      	strb	r3, [r7, #31]
 8005590:	bf00      	nop
 8005592:	e144      	b.n	800581e <UART_SetConfig+0x34e>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a8d      	ldr	r2, [pc, #564]	; (80057d0 <UART_SetConfig+0x300>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d134      	bne.n	8005608 <UART_SetConfig+0x138>
 800559e:	4b8b      	ldr	r3, [pc, #556]	; (80057cc <UART_SetConfig+0x2fc>)
 80055a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a4:	f003 030c 	and.w	r3, r3, #12
 80055a8:	2b0c      	cmp	r3, #12
 80055aa:	d829      	bhi.n	8005600 <UART_SetConfig+0x130>
 80055ac:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <UART_SetConfig+0xe4>)
 80055ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b2:	bf00      	nop
 80055b4:	080055e9 	.word	0x080055e9
 80055b8:	08005601 	.word	0x08005601
 80055bc:	08005601 	.word	0x08005601
 80055c0:	08005601 	.word	0x08005601
 80055c4:	080055f5 	.word	0x080055f5
 80055c8:	08005601 	.word	0x08005601
 80055cc:	08005601 	.word	0x08005601
 80055d0:	08005601 	.word	0x08005601
 80055d4:	080055ef 	.word	0x080055ef
 80055d8:	08005601 	.word	0x08005601
 80055dc:	08005601 	.word	0x08005601
 80055e0:	08005601 	.word	0x08005601
 80055e4:	080055fb 	.word	0x080055fb
 80055e8:	2300      	movs	r3, #0
 80055ea:	77fb      	strb	r3, [r7, #31]
 80055ec:	e117      	b.n	800581e <UART_SetConfig+0x34e>
 80055ee:	2302      	movs	r3, #2
 80055f0:	77fb      	strb	r3, [r7, #31]
 80055f2:	e114      	b.n	800581e <UART_SetConfig+0x34e>
 80055f4:	2304      	movs	r3, #4
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e111      	b.n	800581e <UART_SetConfig+0x34e>
 80055fa:	2308      	movs	r3, #8
 80055fc:	77fb      	strb	r3, [r7, #31]
 80055fe:	e10e      	b.n	800581e <UART_SetConfig+0x34e>
 8005600:	2310      	movs	r3, #16
 8005602:	77fb      	strb	r3, [r7, #31]
 8005604:	bf00      	nop
 8005606:	e10a      	b.n	800581e <UART_SetConfig+0x34e>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a71      	ldr	r2, [pc, #452]	; (80057d4 <UART_SetConfig+0x304>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d120      	bne.n	8005654 <UART_SetConfig+0x184>
 8005612:	4b6e      	ldr	r3, [pc, #440]	; (80057cc <UART_SetConfig+0x2fc>)
 8005614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005618:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800561c:	2b10      	cmp	r3, #16
 800561e:	d00f      	beq.n	8005640 <UART_SetConfig+0x170>
 8005620:	2b10      	cmp	r3, #16
 8005622:	d802      	bhi.n	800562a <UART_SetConfig+0x15a>
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <UART_SetConfig+0x164>
 8005628:	e010      	b.n	800564c <UART_SetConfig+0x17c>
 800562a:	2b20      	cmp	r3, #32
 800562c:	d005      	beq.n	800563a <UART_SetConfig+0x16a>
 800562e:	2b30      	cmp	r3, #48	; 0x30
 8005630:	d009      	beq.n	8005646 <UART_SetConfig+0x176>
 8005632:	e00b      	b.n	800564c <UART_SetConfig+0x17c>
 8005634:	2300      	movs	r3, #0
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	e0f1      	b.n	800581e <UART_SetConfig+0x34e>
 800563a:	2302      	movs	r3, #2
 800563c:	77fb      	strb	r3, [r7, #31]
 800563e:	e0ee      	b.n	800581e <UART_SetConfig+0x34e>
 8005640:	2304      	movs	r3, #4
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e0eb      	b.n	800581e <UART_SetConfig+0x34e>
 8005646:	2308      	movs	r3, #8
 8005648:	77fb      	strb	r3, [r7, #31]
 800564a:	e0e8      	b.n	800581e <UART_SetConfig+0x34e>
 800564c:	2310      	movs	r3, #16
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	bf00      	nop
 8005652:	e0e4      	b.n	800581e <UART_SetConfig+0x34e>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a5f      	ldr	r2, [pc, #380]	; (80057d8 <UART_SetConfig+0x308>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d120      	bne.n	80056a0 <UART_SetConfig+0x1d0>
 800565e:	4b5b      	ldr	r3, [pc, #364]	; (80057cc <UART_SetConfig+0x2fc>)
 8005660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005664:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005668:	2b40      	cmp	r3, #64	; 0x40
 800566a:	d00f      	beq.n	800568c <UART_SetConfig+0x1bc>
 800566c:	2b40      	cmp	r3, #64	; 0x40
 800566e:	d802      	bhi.n	8005676 <UART_SetConfig+0x1a6>
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <UART_SetConfig+0x1b0>
 8005674:	e010      	b.n	8005698 <UART_SetConfig+0x1c8>
 8005676:	2b80      	cmp	r3, #128	; 0x80
 8005678:	d005      	beq.n	8005686 <UART_SetConfig+0x1b6>
 800567a:	2bc0      	cmp	r3, #192	; 0xc0
 800567c:	d009      	beq.n	8005692 <UART_SetConfig+0x1c2>
 800567e:	e00b      	b.n	8005698 <UART_SetConfig+0x1c8>
 8005680:	2300      	movs	r3, #0
 8005682:	77fb      	strb	r3, [r7, #31]
 8005684:	e0cb      	b.n	800581e <UART_SetConfig+0x34e>
 8005686:	2302      	movs	r3, #2
 8005688:	77fb      	strb	r3, [r7, #31]
 800568a:	e0c8      	b.n	800581e <UART_SetConfig+0x34e>
 800568c:	2304      	movs	r3, #4
 800568e:	77fb      	strb	r3, [r7, #31]
 8005690:	e0c5      	b.n	800581e <UART_SetConfig+0x34e>
 8005692:	2308      	movs	r3, #8
 8005694:	77fb      	strb	r3, [r7, #31]
 8005696:	e0c2      	b.n	800581e <UART_SetConfig+0x34e>
 8005698:	2310      	movs	r3, #16
 800569a:	77fb      	strb	r3, [r7, #31]
 800569c:	bf00      	nop
 800569e:	e0be      	b.n	800581e <UART_SetConfig+0x34e>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a4d      	ldr	r2, [pc, #308]	; (80057dc <UART_SetConfig+0x30c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d124      	bne.n	80056f4 <UART_SetConfig+0x224>
 80056aa:	4b48      	ldr	r3, [pc, #288]	; (80057cc <UART_SetConfig+0x2fc>)
 80056ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b8:	d012      	beq.n	80056e0 <UART_SetConfig+0x210>
 80056ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056be:	d802      	bhi.n	80056c6 <UART_SetConfig+0x1f6>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d007      	beq.n	80056d4 <UART_SetConfig+0x204>
 80056c4:	e012      	b.n	80056ec <UART_SetConfig+0x21c>
 80056c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ca:	d006      	beq.n	80056da <UART_SetConfig+0x20a>
 80056cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056d0:	d009      	beq.n	80056e6 <UART_SetConfig+0x216>
 80056d2:	e00b      	b.n	80056ec <UART_SetConfig+0x21c>
 80056d4:	2300      	movs	r3, #0
 80056d6:	77fb      	strb	r3, [r7, #31]
 80056d8:	e0a1      	b.n	800581e <UART_SetConfig+0x34e>
 80056da:	2302      	movs	r3, #2
 80056dc:	77fb      	strb	r3, [r7, #31]
 80056de:	e09e      	b.n	800581e <UART_SetConfig+0x34e>
 80056e0:	2304      	movs	r3, #4
 80056e2:	77fb      	strb	r3, [r7, #31]
 80056e4:	e09b      	b.n	800581e <UART_SetConfig+0x34e>
 80056e6:	2308      	movs	r3, #8
 80056e8:	77fb      	strb	r3, [r7, #31]
 80056ea:	e098      	b.n	800581e <UART_SetConfig+0x34e>
 80056ec:	2310      	movs	r3, #16
 80056ee:	77fb      	strb	r3, [r7, #31]
 80056f0:	bf00      	nop
 80056f2:	e094      	b.n	800581e <UART_SetConfig+0x34e>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a39      	ldr	r2, [pc, #228]	; (80057e0 <UART_SetConfig+0x310>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d124      	bne.n	8005748 <UART_SetConfig+0x278>
 80056fe:	4b33      	ldr	r3, [pc, #204]	; (80057cc <UART_SetConfig+0x2fc>)
 8005700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005704:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570c:	d012      	beq.n	8005734 <UART_SetConfig+0x264>
 800570e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005712:	d802      	bhi.n	800571a <UART_SetConfig+0x24a>
 8005714:	2b00      	cmp	r3, #0
 8005716:	d007      	beq.n	8005728 <UART_SetConfig+0x258>
 8005718:	e012      	b.n	8005740 <UART_SetConfig+0x270>
 800571a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800571e:	d006      	beq.n	800572e <UART_SetConfig+0x25e>
 8005720:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005724:	d009      	beq.n	800573a <UART_SetConfig+0x26a>
 8005726:	e00b      	b.n	8005740 <UART_SetConfig+0x270>
 8005728:	2301      	movs	r3, #1
 800572a:	77fb      	strb	r3, [r7, #31]
 800572c:	e077      	b.n	800581e <UART_SetConfig+0x34e>
 800572e:	2302      	movs	r3, #2
 8005730:	77fb      	strb	r3, [r7, #31]
 8005732:	e074      	b.n	800581e <UART_SetConfig+0x34e>
 8005734:	2304      	movs	r3, #4
 8005736:	77fb      	strb	r3, [r7, #31]
 8005738:	e071      	b.n	800581e <UART_SetConfig+0x34e>
 800573a:	2308      	movs	r3, #8
 800573c:	77fb      	strb	r3, [r7, #31]
 800573e:	e06e      	b.n	800581e <UART_SetConfig+0x34e>
 8005740:	2310      	movs	r3, #16
 8005742:	77fb      	strb	r3, [r7, #31]
 8005744:	bf00      	nop
 8005746:	e06a      	b.n	800581e <UART_SetConfig+0x34e>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a25      	ldr	r2, [pc, #148]	; (80057e4 <UART_SetConfig+0x314>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d124      	bne.n	800579c <UART_SetConfig+0x2cc>
 8005752:	4b1e      	ldr	r3, [pc, #120]	; (80057cc <UART_SetConfig+0x2fc>)
 8005754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005758:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800575c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005760:	d012      	beq.n	8005788 <UART_SetConfig+0x2b8>
 8005762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005766:	d802      	bhi.n	800576e <UART_SetConfig+0x29e>
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <UART_SetConfig+0x2ac>
 800576c:	e012      	b.n	8005794 <UART_SetConfig+0x2c4>
 800576e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005772:	d006      	beq.n	8005782 <UART_SetConfig+0x2b2>
 8005774:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005778:	d009      	beq.n	800578e <UART_SetConfig+0x2be>
 800577a:	e00b      	b.n	8005794 <UART_SetConfig+0x2c4>
 800577c:	2300      	movs	r3, #0
 800577e:	77fb      	strb	r3, [r7, #31]
 8005780:	e04d      	b.n	800581e <UART_SetConfig+0x34e>
 8005782:	2302      	movs	r3, #2
 8005784:	77fb      	strb	r3, [r7, #31]
 8005786:	e04a      	b.n	800581e <UART_SetConfig+0x34e>
 8005788:	2304      	movs	r3, #4
 800578a:	77fb      	strb	r3, [r7, #31]
 800578c:	e047      	b.n	800581e <UART_SetConfig+0x34e>
 800578e:	2308      	movs	r3, #8
 8005790:	77fb      	strb	r3, [r7, #31]
 8005792:	e044      	b.n	800581e <UART_SetConfig+0x34e>
 8005794:	2310      	movs	r3, #16
 8005796:	77fb      	strb	r3, [r7, #31]
 8005798:	bf00      	nop
 800579a:	e040      	b.n	800581e <UART_SetConfig+0x34e>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a11      	ldr	r2, [pc, #68]	; (80057e8 <UART_SetConfig+0x318>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d139      	bne.n	800581a <UART_SetConfig+0x34a>
 80057a6:	4b09      	ldr	r3, [pc, #36]	; (80057cc <UART_SetConfig+0x2fc>)
 80057a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057b4:	d027      	beq.n	8005806 <UART_SetConfig+0x336>
 80057b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057ba:	d817      	bhi.n	80057ec <UART_SetConfig+0x31c>
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01c      	beq.n	80057fa <UART_SetConfig+0x32a>
 80057c0:	e027      	b.n	8005812 <UART_SetConfig+0x342>
 80057c2:	bf00      	nop
 80057c4:	efff69f3 	.word	0xefff69f3
 80057c8:	40011000 	.word	0x40011000
 80057cc:	40023800 	.word	0x40023800
 80057d0:	40004400 	.word	0x40004400
 80057d4:	40004800 	.word	0x40004800
 80057d8:	40004c00 	.word	0x40004c00
 80057dc:	40005000 	.word	0x40005000
 80057e0:	40011400 	.word	0x40011400
 80057e4:	40007800 	.word	0x40007800
 80057e8:	40007c00 	.word	0x40007c00
 80057ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f0:	d006      	beq.n	8005800 <UART_SetConfig+0x330>
 80057f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057f6:	d009      	beq.n	800580c <UART_SetConfig+0x33c>
 80057f8:	e00b      	b.n	8005812 <UART_SetConfig+0x342>
 80057fa:	2300      	movs	r3, #0
 80057fc:	77fb      	strb	r3, [r7, #31]
 80057fe:	e00e      	b.n	800581e <UART_SetConfig+0x34e>
 8005800:	2302      	movs	r3, #2
 8005802:	77fb      	strb	r3, [r7, #31]
 8005804:	e00b      	b.n	800581e <UART_SetConfig+0x34e>
 8005806:	2304      	movs	r3, #4
 8005808:	77fb      	strb	r3, [r7, #31]
 800580a:	e008      	b.n	800581e <UART_SetConfig+0x34e>
 800580c:	2308      	movs	r3, #8
 800580e:	77fb      	strb	r3, [r7, #31]
 8005810:	e005      	b.n	800581e <UART_SetConfig+0x34e>
 8005812:	2310      	movs	r3, #16
 8005814:	77fb      	strb	r3, [r7, #31]
 8005816:	bf00      	nop
 8005818:	e001      	b.n	800581e <UART_SetConfig+0x34e>
 800581a:	2310      	movs	r3, #16
 800581c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005826:	d17f      	bne.n	8005928 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005828:	7ffb      	ldrb	r3, [r7, #31]
 800582a:	2b08      	cmp	r3, #8
 800582c:	d85c      	bhi.n	80058e8 <UART_SetConfig+0x418>
 800582e:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <UART_SetConfig+0x364>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	08005859 	.word	0x08005859
 8005838:	08005879 	.word	0x08005879
 800583c:	08005899 	.word	0x08005899
 8005840:	080058e9 	.word	0x080058e9
 8005844:	080058b1 	.word	0x080058b1
 8005848:	080058e9 	.word	0x080058e9
 800584c:	080058e9 	.word	0x080058e9
 8005850:	080058e9 	.word	0x080058e9
 8005854:	080058d1 	.word	0x080058d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005858:	f7fd ffd6 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 800585c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	005a      	lsls	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	441a      	add	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005872:	b29b      	uxth	r3, r3
 8005874:	61bb      	str	r3, [r7, #24]
        break;
 8005876:	e03a      	b.n	80058ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005878:	f7fd ffda 	bl	8003830 <HAL_RCC_GetPCLK2Freq>
 800587c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	005a      	lsls	r2, r3, #1
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	085b      	lsrs	r3, r3, #1
 8005888:	441a      	add	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005892:	b29b      	uxth	r3, r3
 8005894:	61bb      	str	r3, [r7, #24]
        break;
 8005896:	e02a      	b.n	80058ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	085a      	lsrs	r2, r3, #1
 800589e:	4b5f      	ldr	r3, [pc, #380]	; (8005a1c <UART_SetConfig+0x54c>)
 80058a0:	4413      	add	r3, r2
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6852      	ldr	r2, [r2, #4]
 80058a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	61bb      	str	r3, [r7, #24]
        break;
 80058ae:	e01e      	b.n	80058ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058b0:	f7fd fec6 	bl	8003640 <HAL_RCC_GetSysClockFreq>
 80058b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	005a      	lsls	r2, r3, #1
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	441a      	add	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	61bb      	str	r3, [r7, #24]
        break;
 80058ce:	e00e      	b.n	80058ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	085b      	lsrs	r3, r3, #1
 80058d6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	61bb      	str	r3, [r7, #24]
        break;
 80058e6:	e002      	b.n	80058ee <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	75fb      	strb	r3, [r7, #23]
        break;
 80058ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b0f      	cmp	r3, #15
 80058f2:	d916      	bls.n	8005922 <UART_SetConfig+0x452>
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058fa:	d212      	bcs.n	8005922 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f023 030f 	bic.w	r3, r3, #15
 8005904:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	b29b      	uxth	r3, r3
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	b29a      	uxth	r2, r3
 8005912:	897b      	ldrh	r3, [r7, #10]
 8005914:	4313      	orrs	r3, r2
 8005916:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	897a      	ldrh	r2, [r7, #10]
 800591e:	60da      	str	r2, [r3, #12]
 8005920:	e070      	b.n	8005a04 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	75fb      	strb	r3, [r7, #23]
 8005926:	e06d      	b.n	8005a04 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8005928:	7ffb      	ldrb	r3, [r7, #31]
 800592a:	2b08      	cmp	r3, #8
 800592c:	d859      	bhi.n	80059e2 <UART_SetConfig+0x512>
 800592e:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <UART_SetConfig+0x464>)
 8005930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005934:	08005959 	.word	0x08005959
 8005938:	08005977 	.word	0x08005977
 800593c:	08005995 	.word	0x08005995
 8005940:	080059e3 	.word	0x080059e3
 8005944:	080059ad 	.word	0x080059ad
 8005948:	080059e3 	.word	0x080059e3
 800594c:	080059e3 	.word	0x080059e3
 8005950:	080059e3 	.word	0x080059e3
 8005954:	080059cb 	.word	0x080059cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005958:	f7fd ff56 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 800595c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	085a      	lsrs	r2, r3, #1
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	441a      	add	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	b29b      	uxth	r3, r3
 8005972:	61bb      	str	r3, [r7, #24]
        break;
 8005974:	e038      	b.n	80059e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005976:	f7fd ff5b 	bl	8003830 <HAL_RCC_GetPCLK2Freq>
 800597a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	085a      	lsrs	r2, r3, #1
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	441a      	add	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	fbb2 f3f3 	udiv	r3, r2, r3
 800598e:	b29b      	uxth	r3, r3
 8005990:	61bb      	str	r3, [r7, #24]
        break;
 8005992:	e029      	b.n	80059e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	085a      	lsrs	r2, r3, #1
 800599a:	4b21      	ldr	r3, [pc, #132]	; (8005a20 <UART_SetConfig+0x550>)
 800599c:	4413      	add	r3, r2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6852      	ldr	r2, [r2, #4]
 80059a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	61bb      	str	r3, [r7, #24]
        break;
 80059aa:	e01d      	b.n	80059e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ac:	f7fd fe48 	bl	8003640 <HAL_RCC_GetSysClockFreq>
 80059b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	085a      	lsrs	r2, r3, #1
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	441a      	add	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	61bb      	str	r3, [r7, #24]
        break;
 80059c8:	e00e      	b.n	80059e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	085b      	lsrs	r3, r3, #1
 80059d0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059dc:	b29b      	uxth	r3, r3
 80059de:	61bb      	str	r3, [r7, #24]
        break;
 80059e0:	e002      	b.n	80059e8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	75fb      	strb	r3, [r7, #23]
        break;
 80059e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	2b0f      	cmp	r3, #15
 80059ec:	d908      	bls.n	8005a00 <UART_SetConfig+0x530>
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f4:	d204      	bcs.n	8005a00 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	60da      	str	r2, [r3, #12]
 80059fe:	e001      	b.n	8005a04 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3720      	adds	r7, #32
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	01e84800 	.word	0x01e84800
 8005a20:	00f42400 	.word	0x00f42400

08005a24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	f003 0320 	and.w	r3, r3, #32
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d01a      	beq.n	8005b3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b22:	d10a      	bne.n	8005b3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	605a      	str	r2, [r3, #4]
  }
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005b76:	f7fb fdf7 	bl	8001768 <HAL_GetTick>
 8005b7a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	d10e      	bne.n	8005ba8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f82a 	bl	8005bf2 <UART_WaitOnFlagUntilTimeout>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e020      	b.n	8005bea <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0304 	and.w	r3, r3, #4
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d10e      	bne.n	8005bd4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f814 	bl	8005bf2 <UART_WaitOnFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e00a      	b.n	8005bea <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	603b      	str	r3, [r7, #0]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c02:	e05d      	b.n	8005cc0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d059      	beq.n	8005cc0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c0c:	f7fb fdac 	bl	8001768 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d302      	bcc.n	8005c22 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d11b      	bne.n	8005c5a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c30:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0201 	bic.w	r2, r2, #1
 8005c40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e042      	b.n	8005ce0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d02b      	beq.n	8005cc0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c76:	d123      	bne.n	8005cc0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c80:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c90:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2220      	movs	r2, #32
 8005cac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e00f      	b.n	8005ce0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69da      	ldr	r2, [r3, #28]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	bf0c      	ite	eq
 8005cd0:	2301      	moveq	r3, #1
 8005cd2:	2300      	movne	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	79fb      	ldrb	r3, [r7, #7]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d092      	beq.n	8005c04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <__libc_init_array>:
 8005ce8:	b570      	push	{r4, r5, r6, lr}
 8005cea:	4e0d      	ldr	r6, [pc, #52]	; (8005d20 <__libc_init_array+0x38>)
 8005cec:	4c0d      	ldr	r4, [pc, #52]	; (8005d24 <__libc_init_array+0x3c>)
 8005cee:	1ba4      	subs	r4, r4, r6
 8005cf0:	10a4      	asrs	r4, r4, #2
 8005cf2:	2500      	movs	r5, #0
 8005cf4:	42a5      	cmp	r5, r4
 8005cf6:	d109      	bne.n	8005d0c <__libc_init_array+0x24>
 8005cf8:	4e0b      	ldr	r6, [pc, #44]	; (8005d28 <__libc_init_array+0x40>)
 8005cfa:	4c0c      	ldr	r4, [pc, #48]	; (8005d2c <__libc_init_array+0x44>)
 8005cfc:	f000 f820 	bl	8005d40 <_init>
 8005d00:	1ba4      	subs	r4, r4, r6
 8005d02:	10a4      	asrs	r4, r4, #2
 8005d04:	2500      	movs	r5, #0
 8005d06:	42a5      	cmp	r5, r4
 8005d08:	d105      	bne.n	8005d16 <__libc_init_array+0x2e>
 8005d0a:	bd70      	pop	{r4, r5, r6, pc}
 8005d0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d10:	4798      	blx	r3
 8005d12:	3501      	adds	r5, #1
 8005d14:	e7ee      	b.n	8005cf4 <__libc_init_array+0xc>
 8005d16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d1a:	4798      	blx	r3
 8005d1c:	3501      	adds	r5, #1
 8005d1e:	e7f2      	b.n	8005d06 <__libc_init_array+0x1e>
 8005d20:	08005d80 	.word	0x08005d80
 8005d24:	08005d80 	.word	0x08005d80
 8005d28:	08005d80 	.word	0x08005d80
 8005d2c:	08005d84 	.word	0x08005d84

08005d30 <memset>:
 8005d30:	4402      	add	r2, r0
 8005d32:	4603      	mov	r3, r0
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d100      	bne.n	8005d3a <memset+0xa>
 8005d38:	4770      	bx	lr
 8005d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d3e:	e7f9      	b.n	8005d34 <memset+0x4>

08005d40 <_init>:
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d42:	bf00      	nop
 8005d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d46:	bc08      	pop	{r3}
 8005d48:	469e      	mov	lr, r3
 8005d4a:	4770      	bx	lr

08005d4c <_fini>:
 8005d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4e:	bf00      	nop
 8005d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d52:	bc08      	pop	{r3}
 8005d54:	469e      	mov	lr, r3
 8005d56:	4770      	bx	lr
